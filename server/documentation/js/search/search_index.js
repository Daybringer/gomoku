var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.444,1,2.406]],["body/controllers/AppController.html",[0,2.338,1,3.896,2,2.132,3,0.266,4,0.266,5,0.232,6,3.913,7,0.374,8,2.199,9,5.553,10,1.877,11,0.023,12,1.173,13,4.594,14,1.766,15,0.718,16,0.457,17,3.464,18,3.913,19,1.107,20,3.578,21,3.913,22,3.464,23,2.638,24,0.266,25,0.134,26,3.129,27,1.664,28,1.568,29,4.594,30,0.014,31,0.018,32,0.014]],["title/modules/AppModule.html",[33,1.358,34,2.406]],["body/modules/AppModule.html",[1,3.717,2,2.222,3,0.203,4,0.203,5,0.177,11,0.023,16,0.498,19,0.843,20,3.645,21,2.981,24,0.203,25,0.102,30,0.011,31,0.015,32,0.011,33,2.099,34,4.623,35,1.865,36,1.865,37,2.18,38,2.18,39,1.865,40,3.399,41,2.18,42,2.981,43,2.981,44,2.981,45,3.645,46,3.952,47,2.982,48,2.18,49,2.18,50,3.5,51,3.611,52,3.5,53,2.639,54,2.18,55,2.981,56,2.384,57,3.5,58,2.981,59,2.981,60,3.5,61,2.18,62,3.5,63,3.5,64,1.841,65,2.639,66,3.5,67,0.407,68,3.5,69,3.5,70,3.5,71,3.5,72,3.5,73,1.523,74,3.5,75,1.346,76,3.5,77,3.5,78,3.5,79,3.5,80,3.5,81,1.865,82,2.639,83,3.5,84,3.5,85,3.5,86,3.5,87,2.18]],["title/injectables/AppService.html",[20,2.029,88,0.956]],["body/injectables/AppService.html",[3,0.284,4,0.284,5,0.248,7,0.4,8,2.292,9,5.683,11,0.022,12,1.254,14,1.888,15,0.748,16,0.36,19,1.183,20,3.423,24,0.284,25,0.143,28,1.677,30,0.015,31,0.019,32,0.015,88,1.613,89,2.28,90,4.183,91,4.911,92,4.911,93,4.911]],["title/controllers/AuthController.html",[0,1.444,94,2.406]],["body/controllers/AuthController.html",[0,1.606,2,1.824,3,0.228,4,0.228,5,0.198,7,0.32,8,1.99,10,2.365,11,0.023,12,1.478,14,2.225,15,0.493,16,0.425,17,4.819,18,3.347,19,0.947,22,2.963,23,2.257,24,0.228,25,0.115,26,2.677,27,1.423,28,1.767,30,0.012,31,0.016,32,0.012,94,3.525,95,3.347,96,2.963,97,2.677,98,2.225,99,5.176,100,5.176,101,6.151,102,3.93,103,3.93,104,3.93,105,2.252,106,1.767,107,1.484,108,3.93,109,3.93,110,3.93,111,3.93,112,3.083,113,3.347,114,3.93,115,3.93,116,3.93,117,5.176,118,3.93,119,3.93,120,3.93,121,3.93]],["title/modules/AuthModule.html",[33,1.358,45,2.029]],["body/modules/AuthModule.html",[2,2.198,3,0.199,4,0.199,5,0.174,11,0.023,16,0.497,19,0.829,24,0.199,25,0.101,30,0.011,31,0.015,32,0.011,33,2.081,35,1.834,36,1.834,37,2.145,38,2.145,39,1.834,40,3.371,41,3.371,45,3.924,47,2.949,48,2.145,49,2.145,51,3.57,53,2.596,54,2.145,55,4.033,56,2.345,64,1.324,82,2.596,94,3.686,98,1.324,112,3.67,113,2.933,122,2.933,123,2.933,124,2.933,125,3.933,126,2.931,127,3.443,128,4.964,129,3.443,130,2.145,131,1.978,132,2.345,133,2.596,134,2.596,135,3.443,136,3.443,137,3.443,138,3.443,139,4.735,140,3.443,141,3.443,142,3.443,143,2.933,144,2.345,145,2.596,146,3.443]],["title/injectables/AuthService.html",[88,0.956,112,1.882]],["body/injectables/AuthService.html",[3,0.183,4,0.183,5,0.159,7,0.257,8,1.713,11,0.023,12,1.511,14,2.157,15,0.834,16,0.379,17,2.379,19,0.76,24,0.183,25,0.092,26,2.148,27,1.142,28,2.02,30,0.01,31,0.014,32,0.01,67,0.652,75,1.213,88,1.206,89,1.464,98,2.521,105,2.575,106,2.02,107,1.697,112,2.373,130,1.965,147,2.379,148,5.164,149,4.455,150,4.455,151,4.455,152,1.464,153,3.154,154,4.632,155,3.154,156,3.154,157,4.779,158,3.154,159,4.455,160,3.049,161,3.794,162,2.434,163,3.154,164,4.455,165,3.154,166,3.894,167,2.211,168,4.455,169,3.154,170,1.077,171,2.379,172,1.372,173,2.148,174,2.687,175,2.379,176,3.154,177,3.154,178,3.154,179,4.455,180,3.154]],["title/interfaces/AuthenticationPayload.html",[181,0.513,182,2.201]],["body/interfaces/AuthenticationPayload.html",[0,0.964,3,0.137,4,0.137,5,0.119,7,0.192,11,0.023,15,0.695,16,0.423,19,0.568,24,0.137,25,0.069,27,1.302,28,1.89,30,0.011,31,0.011,32,0.007,33,0.906,67,0.643,75,0.906,81,2.323,97,1.606,98,1.676,126,2.024,152,1.094,160,2.164,162,2.411,170,0.805,172,2.745,181,0.522,182,3.038,183,0.854,184,1.606,185,0.866,186,3.623,187,3.596,188,2.712,189,1.778,190,2.712,191,1.778,192,3.288,193,1.778,194,2.164,195,1.606,196,1.916,197,1.606,198,1.606,199,1.916,200,1.606,201,1.606,202,1.606,203,2.065,204,1.468,205,1.778,206,1.468,207,4.174,208,0.964,209,4.174,210,2.715,211,3.77,212,3.409,213,2.712,214,1.778,215,1.354,216,2.801,217,1.256,218,1.778,219,1.778,220,2.712,221,1.778,222,1.778,223,1.778,224,3.306,225,1.778,226,1.778,227,1.256,228,1.916,229,1.778,230,1.778,231,2.801,232,2.712,233,3.678,234,2.712,235,2.712,236,2.712,237,1.778,238,1.778,239,3.678,240,1.778,241,1.468,242,1.606,243,1.778,244,1.778,245,1.778,246,1.606,247,1.778,248,1.778,249,1.778,250,1.778,251,1.778,252,1.778,253,2.449,254,2.323,255,1.778]],["title/interfaces/ChatRecord.html",[181,0.513,256,2.406]],["body/interfaces/ChatRecord.html",[3,0.269,4,0.269,5,0.234,7,0.378,11,0.022,15,0.723,16,0.341,24,0.269,30,0.014,31,0.018,32,0.014,67,0.669,107,1.877,162,1.682,167,3.249,170,1.585,181,0.836,183,1.682,185,1.387,256,3.922,257,3.502,258,2.516,259,5.574,260,1.795,261,3.502,262,3.502,263,3.955]],["title/controllers/GameController.html",[0,1.444,264,2.406]],["body/controllers/GameController.html",[0,2.147,2,2.439,3,0.304,4,0.304,5,0.265,11,0.022,16,0.386,19,1.266,24,0.304,25,0.154,30,0.016,31,0.019,32,0.016,96,3.962,264,4.227,265,4.475,266,3.273,267,5.255]],["title/classes/GameEntity.html",[25,0.103,268,2.201]],["body/classes/GameEntity.html",[3,0.166,4,0.166,5,0.145,7,0.233,10,2.618,11,0.023,12,1.636,15,0.522,16,0.305,24,0.166,25,0.084,30,0.009,31,0.013,32,0.009,64,1.101,65,2.16,67,0.788,107,1.945,162,1.945,185,1.001,227,2.215,258,1.882,260,1.838,268,2.589,269,1.171,270,2.16,271,2.481,272,4.168,273,4.168,274,4.894,275,4.299,276,4.739,277,4.894,278,3.69,279,2.865,280,3.541,281,2.865,282,3.737,283,2.865,284,2.811,285,2.865,286,2.865,287,2.865,288,2.865,289,4.299,290,4.158,291,3.737,292,2.865,293,2.865,294,4.049,295,2.865,296,2.388,297,3.135,298,2.16,299,1.171,300,3.135,301,3.135,302,3.135,303,2.16,304,3.135,305,3.135,306,2.832]],["title/interfaces/GameInterface.html",[181,0.513,307,2.201]],["body/interfaces/GameInterface.html",[3,0.195,4,0.195,5,0.17,7,0.275,11,0.023,16,0.247,24,0.195,30,0.01,31,0.014,32,0.01,67,0.803,107,2.033,162,2.329,170,1.151,181,0.489,183,1.221,185,1.124,210,3.333,258,2.221,260,1.969,261,2.542,271,2.798,272,4.919,273,4.919,275,4.73,276,4.943,289,4.355,291,2.68,294,3.518,300,3.518,301,3.518,302,3.518,304,3.518,305,3.518,307,2.906,308,2.542,309,5.776,310,5.776]],["title/modules/GameModule.html",[33,1.358,87,2.201]],["body/modules/GameModule.html",[2,2.637,3,0.263,4,0.263,5,0.229,11,0.022,16,0.455,19,1.095,24,0.263,25,0.133,30,0.014,31,0.018,32,0.014,33,2.383,35,2.421,36,2.421,37,2.831,38,2.831,39,2.421,40,3.861,41,2.831,47,3.539,48,2.831,49,2.831,87,4.247,264,4.222,311,3.871,312,3.871,313,4.247,314,4.545,315,4.545,316,4.545]],["title/injectables/GameService.html",[88,0.956,313,2.201]],["body/injectables/GameService.html",[3,0.307,4,0.307,5,0.267,11,0.022,16,0.389,19,1.276,24,0.307,25,0.155,30,0.016,31,0.019,32,0.016,88,1.688,89,2.459,313,3.884,317,4.512]],["title/injectables/GoogleStrategy.html",[88,0.956,125,2.201]],["body/injectables/GoogleStrategy.html",[3,0.216,4,0.216,5,0.188,7,0.304,8,1.924,11,0.023,12,1.278,14,1.436,15,0.812,16,0.442,19,0.9,23,2.145,24,0.216,25,0.109,28,1.275,30,0.012,31,0.016,32,0.012,67,0.434,88,1.354,89,1.734,98,2.17,105,1.625,106,1.275,107,1.071,125,3.116,152,2.619,160,2.484,162,1.812,166,3.773,172,2.177,253,3.843,254,3.006,318,3.181,319,3.241,320,3.735,321,3.735,322,6.285,323,5.643,324,6.028,325,3.735,326,3.181,327,3.181,328,2.816,329,3.181,330,5.004,331,3.181,332,2.816,333,3.181,334,3.181,335,3.735,336,3.735,337,3.735,338,3.735,339,3.735,340,3.735,341,3.735,342,2.666,343,3.735,344,3.735]],["title/classes/IconEntity.html",[25,0.103,345,2.201]],["body/classes/IconEntity.html",[3,0.228,4,0.228,5,0.198,7,0.32,10,2.682,11,0.022,12,1.676,15,0.772,16,0.288,24,0.228,25,0.115,30,0.012,31,0.016,32,0.012,61,3.605,67,0.762,106,1.976,185,1.247,208,2.115,258,2.225,260,1.882,269,1.606,282,4.014,284,3.324,296,2.973,299,1.606,345,3.224,346,3.347,347,3.942,348,3.942,349,3.942,350,3.93,351,3.93,352,3.93,353,3.93,354,3.93,355,3.93]],["title/interfaces/IconInterface.html",[181,0.513,356,2.201]],["body/interfaces/IconInterface.html",[3,0.243,4,0.243,5,0.211,7,0.341,11,0.022,15,0.838,24,0.243,30,0.013,31,0.017,32,0.013,61,3.925,67,0.776,106,2.152,107,2.036,181,0.608,183,1.516,185,1.299,208,2.439,258,2.423,260,1.994,347,4.292,348,4.292,349,4.292,356,3.36,357,3.567]],["title/injectables/JwtAuthGuard.html",[88,0.956,358,2.664]],["body/injectables/JwtAuthGuard.html",[3,0.298,4,0.298,5,0.26,11,0.022,16,0.45,19,1.24,22,3.882,23,2.957,24,0.298,25,0.15,30,0.016,31,0.019,32,0.016,88,1.66,89,2.39,332,3.882,358,4.623,359,4.385,360,5.149]],["title/injectables/JwtStrategy.html",[88,0.956,361,2.664]],["body/injectables/JwtStrategy.html",[3,0.233,4,0.233,5,0.203,7,0.328,8,2.023,11,0.023,12,1.344,14,1.549,16,0.456,19,0.971,23,2.314,24,0.233,25,0.118,26,2.744,27,1.459,28,1.376,30,0.013,31,0.016,32,0.013,56,2.744,67,0.611,73,1.753,88,1.424,89,1.87,98,2.252,105,2.289,106,1.796,107,1.509,128,5.628,143,3.432,152,1.87,186,2.314,228,2.147,319,3.022,326,3.432,327,3.432,328,3.038,332,3.038,333,3.432,334,3.432,361,3.967,362,3.432,363,4.029,364,4.029,365,5.261,366,4.029,367,4.029,368,3.038,369,4.029,370,4.029,371,4.029,372,4.029,373,4.029,374,3.038,375,4.029]],["title/classes/LogInDTO.html",[25,0.103,199,1.882]],["body/classes/LogInDTO.html",[3,0.251,4,0.251,5,0.218,7,0.353,10,2.252,11,0.022,12,1.407,15,0.801,16,0.318,24,0.251,25,0.161,27,2.439,30,0.013,31,0.017,32,0.013,67,0.64,73,2.398,75,2.533,167,3.009,185,1.327,199,2.936,241,3.974,269,1.769,376,5.163,377,3.687,378,5.163,379,3.687,380,4.329,381,4.693,382,4.329,383,4.693,384,3.264,385,2.486]],["title/classes/MatchConstraint.html",[25,0.103,386,2.664]],["body/classes/MatchConstraint.html",[3,0.23,4,0.23,5,0.201,7,0.324,8,2.006,11,0.023,12,1.016,14,1.53,15,0.655,16,0.292,24,0.302,25,0.152,28,1.781,30,0.012,31,0.016,32,0.012,67,0.462,105,1.731,106,1.781,107,1.141,172,2.27,208,1.626,269,1.626,319,2.997,385,2.997,386,4.39,387,3.25,388,3,389,4.444,390,4.959,391,5.218,392,4.959,393,5.264,394,3.979,395,3.935,396,4.444,397,4.66,398,4.444,399,3,400,3.389,401,3.389,402,4.444,403,3.389,404,3.389,405,3.389,406,3.389,407,3.389,408,2.478,409,3.979,410,3.979,411,5.218,412,3.979,413,3.979]],["title/classes/RefreshTokenDTO.html",[25,0.103,203,2.029]],["body/classes/RefreshTokenDTO.html",[3,0.273,4,0.273,5,0.238,7,0.384,10,1.926,11,0.022,12,1.203,15,0.729,16,0.346,24,0.273,25,0.17,27,2.282,30,0.015,31,0.018,32,0.015,67,0.547,167,2.339,185,1.4,203,3.337,204,3.619,212,3.337,231,3.337,254,3.357,269,1.926,379,4.013,383,4.949,385,2.706,414,4.013,415,5.811,416,4.712]],["title/classes/RefreshTokenEntity.html",[25,0.103,131,2.029]],["body/classes/RefreshTokenEntity.html",[3,0.243,4,0.243,5,0.212,7,0.342,10,2.579,11,0.022,12,1.612,15,0.679,16,0.308,24,0.243,25,0.123,30,0.013,31,0.017,32,0.013,67,0.733,131,3.105,132,4.447,185,1.302,208,2.209,258,2.298,260,1.55,269,1.717,271,2.352,282,3.75,284,3.433,296,3.105,299,1.717,417,3.578,418,5.091,419,5.091,420,5.091,421,4.201,422,4.201,423,4.201,424,5.406,425,4.201]],["title/interfaces/RefreshTokenInterface.html",[181,0.513,426,2.201]],["body/interfaces/RefreshTokenInterface.html",[3,0.268,4,0.268,5,0.234,7,0.377,11,0.022,15,0.785,24,0.268,30,0.014,31,0.018,32,0.014,67,0.759,132,3.151,181,0.672,183,1.676,185,1.384,208,2.554,258,2.513,260,1.792,271,2.719,418,5.567,419,5.567,420,5.567,426,3.579,427,3.941]],["title/interfaces/RefreshTokenPayload.html",[181,0.513,428,2.406]],["body/interfaces/RefreshTokenPayload.html",[3,0.123,4,0.123,5,0.107,7,0.172,11,0.023,15,0.665,16,0.421,19,0.51,24,0.192,25,0.062,27,1.475,28,2.01,30,0.007,31,0.01,32,0.007,64,0.813,67,0.384,88,0.895,98,2.264,126,0.982,130,1.318,131,1.9,133,1.595,134,1.595,144,3.137,145,3.071,152,0.982,154,3.071,160,2.923,162,2.223,170,0.722,171,1.595,172,2.751,175,2.494,181,0.307,183,0.766,185,0.797,186,2.339,212,3.748,216,3.043,217,3.137,224,3.043,228,1.127,231,1.215,254,1.127,258,1.566,260,1.52,271,0.921,299,0.865,374,1.595,426,1.318,428,3.137,429,1.441,430,3.923,431,3.923,432,1.802,433,2.817,434,1.802,435,2.817,436,1.802,437,2.774,438,2.774,439,1.595,440,2.253,441,1.595,442,1.802,443,1.9,444,4.715,445,1.215,446,1.802,447,1.802,448,2.817,449,1.802,450,1.802,451,2.817,452,2.817,453,1.802,454,1.802,455,1.802,456,1.802,457,2.817,458,1.802,459,3.923,460,2.817,461,2.817,462,1.802,463,1.802,464,1.802,465,1.802,466,1.802,467,1.802,468,1.802,469,1.802,470,4.175,471,4.715,472,1.802,473,1.802,474,1.802,475,3.923,476,1.802,477,1.802,478,1.802,479,1.802,480,1.802,481,1.802,482,1.802,483,2.817,484,1.802,485,1.802,486,1.802,487,3.469,488,1.595,489,1.802,490,3.469,491,1.802]],["title/interfaces/ResponseObject.html",[181,0.513,206,2.201]],["body/interfaces/ResponseObject.html",[0,0.948,3,0.134,4,0.134,5,0.117,7,0.189,11,0.023,15,0.741,16,0.42,19,0.559,24,0.134,25,0.068,27,1.286,28,1.878,30,0.011,31,0.011,32,0.007,33,0.892,67,0.606,75,0.892,81,2.299,97,1.579,98,1.659,126,2.003,152,1.076,160,2.143,162,2.275,170,0.792,172,2.734,181,0.516,182,3.247,183,0.84,184,1.579,185,0.855,186,3.391,188,2.678,189,1.749,190,2.678,191,1.749,192,3.254,193,1.749,194,2.143,195,1.579,196,1.892,197,1.579,198,1.579,199,1.892,200,1.579,201,1.579,202,1.579,203,2.04,204,1.444,205,1.749,206,2.212,207,4.564,208,1.764,209,4.564,210,3.247,211,4.123,212,3.391,213,2.678,214,1.749,215,1.332,216,2.778,217,1.236,218,1.749,219,1.749,220,2.678,221,1.749,222,1.749,223,1.749,224,3.287,225,1.749,226,1.749,227,1.236,228,1.892,229,1.749,230,1.749,231,2.778,232,2.678,233,3.647,234,2.678,235,2.678,236,2.678,237,1.749,238,1.749,239,3.647,240,1.749,241,1.444,242,1.579,243,1.749,244,1.749,245,1.749,246,1.579,247,1.749,248,1.749,249,1.749,250,1.749,251,1.749,252,1.749,253,2.419,254,2.299,255,1.749]],["title/classes/SignUpDTO.html",[25,0.103,196,1.882]],["body/classes/SignUpDTO.html",[3,0.173,4,0.173,5,0.151,7,0.244,10,2.239,11,0.023,12,1.399,15,0.798,16,0.315,24,0.173,25,0.125,27,2.434,30,0.009,31,0.013,32,0.009,67,0.636,73,2.817,75,2.49,167,3.467,185,1.033,196,2.286,241,3.412,269,1.223,319,1.718,342,3.216,381,3.654,384,2.256,385,1.718,408,3.124,492,4.94,493,2.548,494,5.016,495,5.016,496,2.992,497,2.992,498,2.992,499,2.992,500,2.992,501,4.29,502,4.29,503,4.29,504,2.992,505,4.29,506,3.654,507,4.29,508,2.992,509,4.29,510,4.29,511,3.654,512,2.992,513,5.016,514,5.479,515,5.479,516,2.992,517,5.016,518,4.666,519,2.992,520,4.29,521,2.992,522,2.992,523,2.992,524,2.992,525,2.992,526,2.992,527,4.29,528,2.992,529,2.992]],["title/classes/SocialBladeSkinEntity.html",[25,0.103,530,2.201]],["body/classes/SocialBladeSkinEntity.html",[3,0.228,4,0.228,5,0.198,7,0.32,10,2.682,11,0.022,12,1.676,15,0.772,16,0.288,24,0.228,25,0.115,30,0.012,31,0.016,32,0.012,61,3.605,67,0.762,106,1.976,185,1.247,208,2.115,258,2.225,260,1.882,269,1.606,282,4.014,284,3.324,296,2.973,299,1.606,347,3.942,348,3.942,349,3.942,530,3.224,531,3.347,532,3.93,533,3.93,534,3.93,535,3.93,536,3.93,537,3.93]],["title/interfaces/SocialBladeSkinInterface.html",[181,0.513,538,2.201]],["body/interfaces/SocialBladeSkinInterface.html",[3,0.239,4,0.239,5,0.208,7,0.336,11,0.022,15,0.835,16,0.302,24,0.239,30,0.013,31,0.017,32,0.013,61,3.901,67,0.772,106,2.138,107,2.031,181,0.775,183,1.492,185,1.286,208,2.42,258,2.408,260,1.988,347,4.266,348,4.266,349,4.266,538,3.325,539,3.509,540,4.12]],["title/injectables/TokensService.html",[88,0.956,126,1.64]],["body/injectables/TokensService.html",[3,0.093,4,0.093,5,0.081,7,0.13,8,1.016,11,0.023,12,1.409,14,2.059,15,0.692,16,0.379,19,0.385,24,0.153,25,0.047,27,1.222,28,1.828,30,0.005,31,0.008,32,0.005,64,0.615,67,0.641,88,0.715,89,0.742,98,2.559,105,2.4,106,1.883,107,1.582,126,1.226,130,0.996,131,1.517,133,1.206,134,1.206,144,2.668,145,3.27,152,1.226,154,3.725,160,3.115,162,2.312,170,0.546,171,1.206,172,2.561,175,1.992,181,0.232,186,2.491,212,3.568,216,3.319,217,2.853,224,2.682,228,0.852,231,1.517,254,0.852,258,1.506,260,1.582,271,0.696,299,0.654,374,1.206,426,0.996,428,3.365,429,1.089,430,1.362,431,1.362,432,1.362,433,2.25,434,1.362,435,2.25,436,1.362,437,3.365,438,2.298,439,1.206,440,1.799,441,1.206,442,1.362,443,1.517,444,5.438,445,1.517,446,2.874,447,2.874,448,3.337,449,1.362,450,1.362,451,2.25,452,2.25,453,1.362,454,1.362,455,1.362,456,2.25,457,2.25,458,2.25,459,3.337,460,2.25,461,2.25,462,2.874,463,1.362,464,1.362,465,1.362,466,2.874,467,2.25,468,1.362,469,1.362,470,3.725,471,4.208,472,1.362,473,1.362,474,1.362,475,3.337,476,2.874,477,1.362,478,1.362,479,2.874,480,1.362,481,1.362,482,1.362,483,2.25,484,1.362,485,1.362,486,2.874,487,2.874,488,1.206,489,2.874,490,2.874,491,1.362,541,2.642,542,2.642,543,1.362,544,1.6,545,1.6,546,1.6,547,1.6,548,1.6,549,1.6,550,1.6,551,1.6,552,1.6,553,1.6,554,1.6,555,1.6,556,1.6,557,1.6,558,1.6,559,1.6,560,1.6]],["title/classes/UserEntity.html",[25,0.103,64,1.358]],["body/classes/UserEntity.html",[3,0.151,4,0.151,5,0.131,7,0.212,8,1.49,10,2.5,11,0.023,12,1.562,14,1.49,15,0.821,16,0.376,24,0.224,25,0.076,30,0.008,31,0.012,32,0.008,64,1.49,67,0.691,73,2.014,75,1.78,81,2.732,107,1.111,181,0.378,185,0.933,227,2.466,260,1.111,266,2.883,268,1.621,269,1.064,271,1.686,278,3.49,280,3.3,282,3.794,284,1.495,291,2.658,296,2.225,297,2.921,298,4.133,299,1.064,306,3.734,342,2.466,345,1.621,443,2.658,530,1.621,561,1.772,562,3.942,563,3.152,564,4.367,565,4.367,566,2.602,567,3.874,568,2.602,569,2.602,570,2.602,571,2.602,572,3.3,573,2.602,574,2.602,575,3.874,576,2.602,577,3.3,578,2.216,579,3.152,580,2.216,581,3.152,582,2.216,583,2.466,584,1.772,585,1.772,586,3.193,587,2.413,588,2.413,589,2.413,590,2.413,591,2.216,592,2.216,593,2.216,594,1.772,595,1.772,596,1.772,597,2.216,598,1.772,599,1.772,600,1.772,601,1.772,602,2.216,603,2.216,604,2.216,605,2.216]],["title/interfaces/UserInterface.html",[170,1.206,181,0.513]],["body/interfaces/UserInterface.html",[3,0.196,4,0.196,5,0.171,7,0.276,11,0.023,15,0.887,16,0.394,24,0.196,30,0.011,31,0.015,32,0.011,67,0.73,73,2.519,75,2.226,107,1.97,170,1.599,181,0.68,183,1.227,185,1.128,260,1.343,266,2.917,271,2.802,291,1.946,307,2.11,342,3.084,356,2.11,443,3.325,538,2.11,563,3.943,579,3.655,581,3.655,583,2.859,584,2.308,585,2.308,586,3.342,587,2.917,588,2.917,589,2.917,590,2.917,594,2.308,595,2.308,596,2.308,598,2.308,599,2.308,600,2.308,601,2.308,606,2.308,607,2.886,608,2.886,609,2.886,610,2.886]],["title/classes/UsernameExistsConstraint.html",[25,0.103,611,2.664]],["body/classes/UsernameExistsConstraint.html",[3,0.223,4,0.223,5,0.195,7,0.314,8,1.966,11,0.023,12,0.986,14,1.484,15,0.484,16,0.421,24,0.296,25,0.149,28,2.085,30,0.012,31,0.016,32,0.012,64,1.484,65,2.91,67,0.448,73,1.679,81,2.725,98,1.484,105,1.679,106,1.317,107,1.107,162,1.397,172,1.679,228,2.056,269,1.577,299,1.577,319,2.937,385,2.937,387,3.185,389,4.356,390,4.885,392,4.885,393,5.201,396,4.356,397,4.325,398,4.356,399,3.856,401,4.356,402,4.885,403,3.287,404,3.287,405,3.287,406,3.287,445,2.216,611,4.325,612,2.628,613,5.114,614,3.859,615,3.859,616,3.287,617,3.859,618,3.287]],["title/controllers/UsersController.html",[0,1.444,215,2.029]],["body/controllers/UsersController.html",[0,0.842,2,0.957,3,0.119,4,0.119,5,0.104,7,0.168,8,1.246,10,1.637,11,0.023,12,1.159,14,1.746,15,0.75,16,0.402,19,0.496,24,0.119,25,0.06,27,1.174,28,1.789,30,0.01,31,0.01,32,0.006,33,0.792,67,0.609,75,0.792,81,2.134,96,1.554,97,1.404,98,2.246,105,1.975,106,1.55,107,1.302,126,1.859,152,0.957,160,2.602,162,2.351,170,0.704,172,2.652,181,0.471,182,2.828,184,1.404,186,3.261,188,3.02,189,1.554,190,2.444,191,1.554,192,3.722,193,1.554,194,1.988,195,1.404,196,2.419,197,1.404,198,1.404,199,2.419,200,1.404,201,1.404,202,1.404,203,2.607,204,1.284,205,1.554,206,1.284,207,3.951,208,0.842,209,3.951,210,2.494,211,3.569,212,3.261,213,2.444,214,1.554,215,1.861,216,3.01,217,1.098,218,1.554,219,1.554,220,2.444,221,1.554,222,1.554,223,1.554,224,3.148,225,1.554,226,1.554,227,1.098,228,1.727,229,1.554,230,1.554,231,3.01,232,2.444,233,3.423,234,2.444,235,2.444,236,2.444,237,1.554,238,1.554,239,3.423,240,1.554,241,1.284,242,1.404,243,1.554,244,1.554,245,1.554,246,1.404,247,1.554,248,2.444,249,1.554,250,1.554,251,1.554,252,3.02,253,3.092,254,2.63,255,1.554,619,2.061,620,2.76,621,2.76,622,2.061,623,2.061,624,1.756,625,1.756,626,2.061,627,2.061,628,2.061,629,2.061,630,1.756,631,2.061,632,2.061]],["title/modules/UsersModule.html",[33,1.358,46,2.201]],["body/modules/UsersModule.html",[2,2.488,3,0.24,4,0.24,5,0.209,11,0.022,16,0.489,19,0.999,24,0.24,25,0.121,30,0.013,31,0.017,32,0.013,33,2.284,35,2.209,36,2.209,37,2.583,38,2.583,39,2.209,40,3.699,41,2.583,45,3.825,46,4.277,47,3.339,48,2.583,49,2.583,51,4.042,53,3.127,54,2.583,64,1.594,82,3.127,194,3.306,195,2.824,215,3.411,633,3.532,634,4.147,635,3.532,636,4.147,637,4.147,638,3.532,639,4.147]],["title/injectables/UsersService.html",[88,0.956,194,1.754]],["body/injectables/UsersService.html",[3,0.076,4,0.076,5,0.066,7,0.107,8,0.86,11,0.023,12,1.212,14,1.825,15,0.804,16,0.348,19,0.316,24,0.076,25,0.038,27,0.475,28,2.21,30,0.015,31,0.007,32,0.004,54,0.817,64,1.124,67,0.523,73,2.412,75,2.21,88,0.606,89,0.609,98,2.374,105,2.065,106,1.62,107,1.361,112,2.4,152,1.038,157,1.118,160,2.356,161,1.118,162,2.289,170,0.448,172,2.232,194,1.111,196,1.84,197,0.894,198,0.894,199,1.84,200,0.894,201,0.894,202,0.894,208,0.536,210,1.821,211,1.992,216,1.285,217,1.558,224,1.285,242,2.353,246,1.524,299,0.536,319,0.754,342,3.063,368,0.99,378,3.302,384,0.99,408,1.393,437,2.353,445,1.285,470,2.605,488,2.605,506,1.118,511,1.118,518,1.118,543,1.118,590,1.393,620,1.905,621,2.491,625,1.118,630,1.118,638,1.118,640,1.118,641,2.924,642,2.237,643,2.237,644,2.237,645,2.924,646,1.312,647,1.312,648,1.312,649,2.237,650,1.312,651,2.237,652,1.312,653,2.237,654,1.312,655,2.237,656,1.312,657,2.237,658,1.312,659,1.312,660,2.924,661,2.237,662,1.312,663,1.312,664,1.312,665,1.312,666,1.312,667,1.312,668,4.22,669,1.312,670,1.312,671,2.237,672,2.237,673,2.237,674,2.237,675,1.312,676,2.237,677,1.312,678,1.312,679,1.312,680,1.312,681,2.237,682,1.312,683,1.312,684,1.312,685,1.312,686,1.312,687,1.312,688,1.312,689,1.312,690,1.312,691,2.237,692,2.237,693,1.312,694,1.312,695,1.312,696,1.312,697,1.312,698,2.237,699,1.312,700,1.312,701,1.312,702,1.312,703,1.312,704,1.312,705,1.312,706,1.312,707,1.312,708,1.312,709,2.924,710,2.237,711,1.312,712,1.312,713,1.312,714,1.312,715,1.312,716,1.312,717,1.312,718,2.237,719,1.312,720,1.312,721,1.312,722,2.924,723,1.312,724,1.312,725,1.312,726,2.237,727,1.312,728,1.312,729,1.312,730,2.237,731,1.312,732,1.312,733,1.312,734,1.312,735,1.312,736,1.312,737,1.312,738,2.237,739,2.237,740,1.312,741,1.312,742,4.22,743,1.312,744,1.312,745,1.312,746,1.312,747,1.312,748,1.312,749,1.312,750,1.312,751,1.312]],["title/interfaces/colors.html",[181,0.513,583,1.882]],["body/interfaces/colors.html",[3,0.178,4,0.178,5,0.155,7,0.251,11,0.023,15,0.84,16,0.407,24,0.254,25,0.09,30,0.01,31,0.014,32,0.01,64,1.184,67,0.592,73,1.339,75,1.184,81,2.333,181,0.447,183,1.115,185,1.055,227,2.333,260,1.256,266,3.174,268,1.917,271,1.339,278,3.301,282,3.912,284,1.768,291,2.926,296,2.515,297,3.301,298,3.842,299,1.258,306,3.994,342,1.64,345,1.917,443,1.768,530,1.917,561,2.097,562,2.622,563,2.097,564,2.622,565,2.622,572,2.622,577,3.729,578,2.622,579,3.47,580,2.622,581,3.47,582,2.622,583,2.957,584,3.78,585,3.78,586,3.457,587,2.727,588,2.727,589,2.727,590,2.727,591,2.622,592,2.622,593,2.622,594,2.097,595,2.097,596,2.097,597,2.622,598,2.097,599,2.097,600,2.097,601,2.097,602,2.622,603,2.622,604,2.622,605,2.622]],["title/interfaces/colors-1.html",[181,0.429,303,2.226,583,1.573]],["body/interfaces/colors-1.html",[3,0.22,4,0.22,5,0.191,7,0.309,11,0.023,15,0.872,16,0.417,24,0.22,30,0.012,31,0.016,32,0.012,67,0.587,73,1.649,75,1.457,170,1.294,181,0.734,183,1.373,185,1.217,260,1.449,266,3.147,271,2.199,291,2.177,307,2.361,342,2.019,356,2.361,443,2.177,538,2.361,563,2.581,579,3.872,581,3.872,583,3.23,584,4.13,585,4.13,586,3.54,587,3.147,588,3.147,589,3.147,590,3.147,594,2.581,595,2.581,596,2.581,598,2.581,599,2.581,600,2.581,601,2.581,606,2.581,607,3.228,608,3.228,609,3.228,610,3.228]],["title/coverage.html",[752,3.634]],["body/coverage.html",[0,2.098,1,1.776,5,0.132,6,2.221,11,0.023,20,1.498,25,0.186,30,0.008,31,0.012,32,0.008,39,1.389,64,1.003,67,0.303,88,1.657,90,2.221,94,1.776,95,2.221,112,1.389,125,1.624,126,1.21,131,1.498,132,2.643,147,2.926,167,1.295,170,0.89,173,1.776,181,0.95,182,1.624,184,3.156,194,1.295,196,1.389,199,1.389,203,1.498,204,1.624,206,1.624,215,1.498,217,1.389,227,3.858,256,1.776,257,2.926,264,1.776,265,2.221,268,1.624,270,1.966,307,1.624,308,1.966,313,1.624,317,2.221,318,2.221,345,1.624,346,2.221,356,1.624,357,2.221,358,1.966,359,2.221,361,1.966,362,2.221,376,2.221,377,2.221,386,1.966,387,3.417,388,2.926,399,3.494,408,1.624,414,2.221,417,2.221,426,1.624,427,2.221,428,1.776,429,3.156,438,1.776,445,1.498,492,2.221,493,2.221,530,1.624,531,2.221,538,1.624,539,2.221,561,2.643,583,2.067,606,2.643,611,1.966,612,3.156,640,2.221,752,1.966,753,2.608,754,2.608,755,2.608,756,5.487,757,3.88,758,2.608,759,5.132,760,6.365,761,2.221,762,2.221,763,5.132,764,6.254,765,2.608,766,3.88,767,2.221,768,5.487,769,3.88,770,2.221,771,2.608,772,2.608]],["title/dependencies.html",[36,2.264,773,2.952]],["body/dependencies.html",[11,0.023,19,1.046,23,2.495,25,0.127,30,0.013,31,0.017,32,0.013,36,2.314,54,2.706,56,2.959,58,3.7,59,3.7,130,2.706,166,3.276,173,2.959,299,1.775,328,4.818,329,3.7,331,3.7,368,3.276,385,2.495,774,6.072,775,4.344,776,4.344,777,4.344,778,5.522,779,4.344,780,4.344,781,4.344,782,4.344,783,4.344,784,4.344,785,4.344,786,4.344,787,4.344,788,4.344,789,4.344,790,4.344,791,4.344,792,4.344,793,4.344,794,4.344,795,4.344,796,4.344,797,4.344,798,4.344,799,4.344]],["title/miscellaneous/enumerations.html",[800,1.695,801,3.619]],["body/miscellaneous/enumerations.html",[7,0.312,11,0.023,30,0.012,31,0.016,32,0.012,260,1.097,270,2.884,275,4.588,276,4.588,289,4.588,294,4.588,300,4.588,301,4.588,302,4.588,303,2.884,304,4.588,305,4.588,308,2.884,395,5.459,561,2.605,586,3.79,587,3.79,588,3.79,589,3.79,606,2.605,800,2.196,801,3.257,802,3.824,803,3.824,804,5.083,805,5.083]],["title/miscellaneous/functions.html",[800,1.695,806,3.619]],["body/miscellaneous/functions.html",[7,0.402,11,0.021,30,0.015,31,0.019,32,0.015,39,3.424,105,2.599,106,2.04,107,1.713,387,3.721,388,3.718,397,4.847,400,4.199,407,4.199,408,3.721,612,3.358,618,4.199,624,5.088,767,4.199,770,5.088,800,2.832,806,4.199,807,4.93,808,4.93,809,4.199]],["title/index.html",[7,0.24,810,2.952,811,2.952]],["body/index.html",[11,0.022,30,0.014,31,0.017,32,0.014,262,3.332,437,3.01,440,3.01,752,3.332,812,4.419,813,4.419,814,4.419,815,4.419,816,4.419,817,4.419,818,6.876,819,4.419,820,4.419,821,4.419,822,6.771,823,4.419,824,4.419,825,5.583,826,4.419,827,4.419,828,4.419,829,4.419,830,5.583,831,5.583,832,4.419,833,4.419,834,4.419,835,4.419,836,4.419,837,4.419,838,4.419,839,4.419,840,4.419,841,4.419,842,4.419,843,4.419,844,4.419]],["title/interfaces/message.html",[167,1.754,181,0.513]],["body/interfaces/message.html",[3,0.273,4,0.273,5,0.238,7,0.384,11,0.022,15,0.864,16,0.346,24,0.273,30,0.015,31,0.018,32,0.015,67,0.675,162,1.707,167,3.128,170,1.609,181,0.844,183,1.707,185,1.4,256,3.209,257,3.553,258,1.812,259,4.013,260,1.351,261,3.553,262,4.96,263,5.603]],["title/modules.html",[35,2.568]],["body/modules.html",[11,0.019,30,0.016,31,0.019,32,0.016,34,3.535,35,2.765,45,2.981,46,3.233,87,3.233,845,6.797,846,6.797,847,6.797,848,6.797]],["title/overview.html",[849,4.105]],["body/overview.html",[2,1.858,11,0.022,20,3.354,30,0.012,31,0.016,32,0.012,33,1.539,34,4.643,35,2.133,36,2.133,37,2.494,38,2.494,39,2.133,40,2.494,41,2.494,42,3.41,43,3.41,44,3.41,45,4.026,46,4.186,47,3.263,48,2.494,49,2.494,87,3.859,89,1.858,112,3.581,122,3.41,123,3.41,124,3.41,125,3.637,126,2.711,183,1.45,194,2.899,269,1.636,311,3.41,312,3.41,313,3.637,633,3.41,635,3.41,849,3.41,850,5.24,851,4.004,852,4.004,853,4.004]],["title/miscellaneous/variables.html",[800,1.695,854,3.619]],["body/miscellaneous/variables.html",[7,0.381,11,0.022,15,0.587,30,0.015,31,0.018,32,0.015,67,0.543,144,3.186,147,3.527,173,3.94,174,3.984,306,4.469,387,2.913,395,4.947,429,3.186,438,3.94,439,3.527,440,3.94,441,3.527,445,3.322,612,3.186,616,3.984,761,3.984,762,5.588,800,2.687,809,3.984,854,3.984,855,4.678,856,4.678,857,4.678,858,4.678]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"controllers/GameController.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"modules/GameModule.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":227,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"classes/GameEntity.html":{},"interfaces/ResponseObject.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"interfaces/colors.html":{},"coverage.html":{}}}],["0.1.13",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["0.2.29",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["0.6.1",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":768,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":769,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":303,"title":{"interfaces/colors-1.html":{}},"body":{"classes/GameEntity.html":{},"miscellaneous/enumerations.html":{}}}],["1.0.0",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":852,"title":{},"body":{"overview.html":{}}}],["1000",{"_index":593,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["12",{"_index":853,"title":{},"body":{"overview.html":{}}}],["13",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["1h",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{}}}],["2.0.0",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["2.1.4",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":515,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["24",{"_index":234,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["3",{"_index":514,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["3.0.2",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":235,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["4",{"_index":850,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["5.0.0",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["6.6.3",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":233,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["7.1.5",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":851,"title":{},"body":{"overview.html":{}}}],["8.2.0",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["accesstoken",{"_index":253,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"injectables/GoogleStrategy.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["admin?:boolean",{"_index":610,"title":{},"body":{"interfaces/UserInterface.html":{},"interfaces/colors-1.html":{}}}],["admin?:false",{"_index":592,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["ahoj",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["already",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{}}}],["any)[relatedpropertyname",{"_index":413,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["app",{"_index":820,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":20,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":392,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{}}}],["args.constraints",{"_index":410,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["args.object",{"_index":412,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["async",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["audience",{"_index":441,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["auth.controller",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":94,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticationpayload",{"_index":182,"title":{"interfaces/AuthenticationPayload.html":{}},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["authguard",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":360,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":45,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":262,"title":{},"body":{"interfaces/ChatRecord.html":{},"index.html":{},"interfaces/message.html":{}}}],["authservice",{"_index":112,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["availableicons",{"_index":599,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["availablesocialbladeskins",{"_index":601,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["await",{"_index":224,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["base_options",{"_index":438,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["bcrypt.compare(newpassword",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["bearer",{"_index":255,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["beforeinsert",{"_index":298,"title":{},"body":{"classes/GameEntity.html":{},"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["bit",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["body",{"_index":188,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["body.refreshtoken",{"_index":251,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":208,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/ResponseObject.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GameModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":723,"title":{},"body":{"injectables/UsersService.html":{}}}],["browse",{"_index":848,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":845,"title":{},"body":{"modules.html":{}}}],["buildresponsepayload",{"_index":252,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["buildresponsepayload(user",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{}}}],["callbackurl",{"_index":339,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["can't",{"_index":509,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["catch",{"_index":482,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["catch((err",{"_index":706,"title":{},"body":{"injectables/UsersService.html":{}}}],["catcherror((err",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["change",{"_index":721,"title":{},"body":{"injectables/UsersService.html":{}}}],["characters",{"_index":518,"title":{},"body":{"classes/SignUpDTO.html":{},"injectables/UsersService.html":{}}}],["characters'})@minlength(3",{"_index":512,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["characters)'})@maxlength(20",{"_index":516,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["chatrecord",{"_index":256,"title":{"interfaces/ChatRecord.html":{}},"body":{"interfaces/ChatRecord.html":{},"coverage.html":{},"interfaces/message.html":{}}}],["check",{"_index":742,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":25,"title":{"classes/GameEntity.html":{},"classes/IconEntity.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"classes/UserEntity.html":{},"classes/UsernameExistsConstraint.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"controllers/GameController.html":{},"classes/GameEntity.html":{},"modules/GameModule.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":269,"title":{},"body":{"classes/GameEntity.html":{},"classes/IconEntity.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"classes/UserEntity.html":{},"classes/UsernameExistsConstraint.html":{},"overview.html":{}}}],["clientid",{"_index":335,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["clientsecret",{"_index":337,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["cluster_appmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_gamemodule",{"_index":311,"title":{},"body":{"modules/GameModule.html":{},"overview.html":{}}}],["cluster_gamemodule_providers",{"_index":312,"title":{},"body":{"modules/GameModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":633,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":634,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":635,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["colors",{"_index":583,"title":{"interfaces/colors.html":{},"interfaces/colors-1.html":{}},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"coverage.html":{}}}],["column",{"_index":282,"title":{},"body":{"classes/GameEntity.html":{},"classes/IconEntity.html":{},"classes/RefreshTokenEntity.html":{},"classes/SocialBladeSkinEntity.html":{},"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["column('uuid",{"_index":424,"title":{},"body":{"classes/RefreshTokenEntity.html":{}}}],["column({default",{"_index":280,"title":{},"body":{"classes/GameEntity.html":{},"classes/UserEntity.html":{}}}],["column({default:false",{"_index":591,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["column({type",{"_index":290,"title":{},"body":{"classes/GameEntity.html":{}}}],["column({unique",{"_index":567,"title":{},"body":{"classes/UserEntity.html":{}}}],["combination",{"_index":304,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"miscellaneous/enumerations.html":{}}}],["comparepassword",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparepassword(newpassword",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparepassword(password",{"_index":711,"title":{},"body":{"injectables/UsersService.html":{}}}],["config",{"_index":330,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["configmodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_secret",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["const",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"injectables/GoogleStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constraints",{"_index":406,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{}}}],["constructor",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(configservice",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(jwtservice",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["constructor(userrepository",{"_index":543,"title":{},"body":{"injectables/TokensService.html":{},"injectables/UsersService.html":{}}}],["contain",{"_index":510,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["content",{"_index":263,"title":{},"body":{"interfaces/ChatRecord.html":{},"interfaces/message.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/GameController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticationPayload.html":{},"controllers/GameController.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('game",{"_index":267,"title":{},"body":{"controllers/GameController.html":{}}}],["controller('users",{"_index":214,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/GameController.html":{},"modules/GameModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":752,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create(user",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{}}}],["createaccesstokenfromrefreshtoken",{"_index":476,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["createaccesstokenfromrefreshtoken(refresh",{"_index":545,"title":{},"body":{"injectables/TokensService.html":{}}}],["created",{"_index":562,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["createdatecolumn",{"_index":278,"title":{},"body":{"classes/GameEntity.html":{},"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["createrefreshtoken",{"_index":447,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["createrefreshtoken(user",{"_index":547,"title":{},"body":{"injectables/TokensService.html":{}}}],["createuser",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(username",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{}}}],["credentials",{"_index":242,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["credit",{"_index":596,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["custom",{"_index":302,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"miscellaneous/enumerations.html":{}}}],["data",{"_index":209,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["database",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":271,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["declarations",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GameModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decoderefreshtoken",{"_index":479,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["decoderefreshtoken(token",{"_index":549,"title":{},"body":{"injectables/TokensService.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/GameEntity.html":{},"classes/IconEntity.html":{},"classes/LogInDTO.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["decorators/match.decorator",{"_index":524,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["decorators/match.decorator.ts",{"_index":388,"title":{},"body":{"classes/MatchConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["decorators/match.decorator.ts:23",{"_index":394,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["decorators/usernameexists.decorator.ts",{"_index":612,"title":{},"body":{"classes/UsernameExistsConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["decorators/usernameexists.decorator.ts:15",{"_index":614,"title":{},"body":{"classes/UsernameExistsConstraint.html":{}}}],["default",{"_index":306,"title":{},"body":{"classes/GameEntity.html":{},"classes/UserEntity.html":{},"interfaces/colors.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GameEntity.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GameModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":812,"title":{},"body":{"index.html":{}}}],["development",{"_index":821,"title":{},"body":{"index.html":{}}}],["discord",{"_index":839,"title":{},"body":{"index.html":{}}}],["dist/public",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":507,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["done",{"_index":323,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["dotenv",{"_index":331,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["dto/log",{"_index":200,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/sign",{"_index":197,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":483,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["e2e",{"_index":832,"title":{},"body":{"index.html":{}}}],["elo",{"_index":594,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["elodifference",{"_index":272,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{}}}],["email",{"_index":342,"title":{},"body":{"injectables/GoogleStrategy.html":{},"classes/SignUpDTO.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["email'})@maxlength(40",{"_index":496,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["emails",{"_index":343,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emails[0].value",{"_index":344,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["emailtolowercase",{"_index":564,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["empty",{"_index":744,"title":{},"body":{"injectables/UsersService.html":{}}}],["encoded",{"_index":467,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["enemeycolor",{"_index":584,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["enough",{"_index":746,"title":{},"body":{"injectables/UsersService.html":{}}}],["entities",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":296,"title":{},"body":{"classes/GameEntity.html":{},"classes/IconEntity.html":{},"classes/RefreshTokenEntity.html":{},"classes/SocialBladeSkinEntity.html":{},"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["enum",{"_index":291,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["enumerations",{"_index":801,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":709,"title":{},"body":{"injectables/UsersService.html":{}}}],["error(\"credentials",{"_index":732,"title":{},"body":{"injectables/UsersService.html":{}}}],["errors",{"_index":211,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["exists",{"_index":727,"title":{},"body":{"injectables/UsersService.html":{}}}],["expiration",{"_index":452,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["expiration.settime(expiration.gettime",{"_index":453,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["expired",{"_index":485,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["expires",{"_index":418,"title":{},"body":{"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{}}}],["expiresin",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["export",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"controllers/GameController.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"modules/GameModule.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"interfaces/message.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GameModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":332,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":228,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"controllers/GameController.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"modules/GameModule.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"coverage.html":{},"interfaces/message.html":{}}}],["finalstate",{"_index":273,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{}}}],["findbyemailorusername",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemailorusername(email",{"_index":729,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemailorusername(usernameoremail",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyemail(email",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyusername",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyusername(username",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["findtokenbyid",{"_index":541,"title":{},"body":{"injectables/TokensService.html":{}}}],["findtokenbyid(id",{"_index":456,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["found",{"_index":472,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["framework",{"_index":814,"title":{},"body":{"index.html":{}}}],["from(this.userrepository.findone",{"_index":730,"title":{},"body":{"injectables/UsersService.html":{}}}],["from(this.userrepository.save(newuser)).pipe",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["from(this.userrepository.update(uuid",{"_index":736,"title":{},"body":{"injectables/UsersService.html":{}}}],["function",{"_index":399,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{},"coverage.html":{}}}],["functions",{"_index":806,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["game",{"_index":266,"title":{},"body":{"controllers/GameController.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["game.controller",{"_index":315,"title":{},"body":{"modules/GameModule.html":{}}}],["game.service",{"_index":316,"title":{},"body":{"modules/GameModule.html":{}}}],["game/models/game.entity",{"_index":578,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["game/models/game.interface",{"_index":607,"title":{},"body":{"interfaces/UserInterface.html":{},"interfaces/colors-1.html":{}}}],["gameboard",{"_index":586,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"miscellaneous/enumerations.html":{}}}],["gameboard.normal",{"_index":597,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["gamecontroller",{"_index":264,"title":{"controllers/GameController.html":{}},"body":{"controllers/GameController.html":{},"modules/GameModule.html":{},"coverage.html":{}}}],["gameentity",{"_index":268,"title":{"classes/GameEntity.html":{}},"body":{"classes/GameEntity.html":{},"classes/UserEntity.html":{},"interfaces/colors.html":{},"coverage.html":{}}}],["gameinterface",{"_index":307,"title":{"interfaces/GameInterface.html":{}},"body":{"interfaces/GameInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/colors-1.html":{},"coverage.html":{}}}],["gamemodule",{"_index":87,"title":{"modules/GameModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GameModule.html":{},"modules.html":{},"overview.html":{}}}],["games",{"_index":595,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["gameservice",{"_index":313,"title":{"injectables/GameService.html":{}},"body":{"modules/GameModule.html":{},"injectables/GameService.html":{},"coverage.html":{},"overview.html":{}}}],["gametype",{"_index":289,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"miscellaneous/enumerations.html":{}}}],["generateaccesstoken",{"_index":542,"title":{},"body":{"injectables/TokensService.html":{}}}],["generateaccesstoken(user",{"_index":458,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["generatejwt",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatejwt(user",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["generaterefreshtoken",{"_index":462,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["generaterefreshtoken(user",{"_index":553,"title":{},"body":{"injectables/TokensService.html":{}}}],["get('google",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google')@useguards(undefined",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/redirect",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('google/redirect')@useguards(undefined",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getrepository",{"_index":615,"title":{},"body":{"classes/UsernameExistsConstraint.html":{}}}],["getrepository(userentity",{"_index":616,"title":{},"body":{"classes/UsernameExistsConstraint.html":{},"miscellaneous/variables.html":{}}}],["getstoredtokenfromrefreshtokenpayload",{"_index":489,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["getstoredtokenfromrefreshtokenpayload(payload",{"_index":555,"title":{},"body":{"injectables/TokensService.html":{}}}],["getting",{"_index":810,"title":{"index.html":{}},"body":{}}],["getuserfromrefreshtokenpayload",{"_index":486,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["getuserfromrefreshtokenpayload(payload",{"_index":557,"title":{},"body":{"injectables/TokensService.html":{}}}],["gomokudatabase",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["google",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["googleauth",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth(@req",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauth(req",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(@req",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleauthredirect(req",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["googleid",{"_index":563,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["googlelogin",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlelogin(req",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["googlestrategy",{"_index":125,"title":{"injectables/GoogleStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["hashedpassword",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashpassword",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(password",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["hello",{"_index":92,"title":{},"body":{"injectables/AppService.html":{}}}],["hit",{"_index":223,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["host",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost:3000/api/auth/google/redirect",{"_index":340,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["https://discord.com/asygt6j",{"_index":840,"title":{},"body":{"index.html":{}}}],["https://playgomoku.com",{"_index":440,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["icon",{"_index":579,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["icon.entity",{"_index":580,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["icon.interface",{"_index":608,"title":{},"body":{"interfaces/UserInterface.html":{},"interfaces/colors-1.html":{}}}],["iconentity",{"_index":345,"title":{"classes/IconEntity.html":{}},"body":{"classes/IconEntity.html":{},"classes/UserEntity.html":{},"interfaces/colors.html":{},"coverage.html":{}}}],["iconinterface",{"_index":356,"title":{"interfaces/IconInterface.html":{}},"body":{"interfaces/IconInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/colors-1.html":{},"coverage.html":{}}}],["id",{"_index":258,"title":{},"body":{"interfaces/ChatRecord.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"interfaces/message.html":{}}}],["identifier",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["idk",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":371,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":389,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"controllers/GameController.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"modules/GameModule.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"interfaces/message.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["in.dto",{"_index":201,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["in.dto.ts",{"_index":377,"title":{},"body":{"classes/LogInDTO.html":{},"coverage.html":{}}}],["in.dto.ts:5",{"_index":382,"title":{},"body":{"classes/LogInDTO.html":{}}}],["in.dto.ts:8",{"_index":380,"title":{},"body":{"classes/LogInDTO.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"controllers/GameController.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"modules/GameModule.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"interfaces/message.html":{}}}],["information",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["injectable",{"_index":88,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokensService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":89,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TokensService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(userentity",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":817,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":819,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":484,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["interface",{"_index":181,"title":{"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"interfaces/GameInterface.html":{},"interfaces/IconInterface.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"interfaces/SocialBladeSkinInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"interfaces/message.html":{}},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"interfaces/GameInterface.html":{},"interfaces/IconInterface.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"coverage.html":{},"interfaces/message.html":{}}}],["interfaces",{"_index":183,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"interfaces/GameInterface.html":{},"interfaces/IconInterface.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"interfaces/SocialBladeSkinInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"interfaces/message.html":{},"overview.html":{}}}],["invalid",{"_index":241,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"classes/LogInDTO.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"controllers/UsersController.html":{}}}],["isalphanumeric",{"_index":384,"title":{},"body":{"classes/LogInDTO.html":{},"classes/SignUpDTO.html":{},"injectables/UsersService.html":{}}}],["isalphanumeric('en",{"_index":381,"title":{},"body":{"classes/LogInDTO.html":{},"classes/SignUpDTO.html":{}}}],["isemail",{"_index":495,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["isnotempty",{"_index":383,"title":{},"body":{"classes/LogInDTO.html":{},"classes/RefreshTokenDTO.html":{}}}],["isnotempty({message",{"_index":379,"title":{},"body":{"classes/LogInDTO.html":{},"classes/RefreshTokenDTO.html":{}}}],["isrevoked",{"_index":419,"title":{},"body":{"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{}}}],["isstring",{"_index":520,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["isstring()@minlength(4",{"_index":498,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["issuer",{"_index":439,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["jointable",{"_index":577,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["jsonwebtoken",{"_index":434,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["jti",{"_index":430,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["jwt",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":358,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtid",{"_index":464,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["jwtmodule",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["jwtstrategy",{"_index":361,"title":{"injectables/JwtStrategy.html":{}},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["legend",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GameModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":841,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":844,"title":{},"body":{"index.html":{}}}],["literal",{"_index":187,"title":{},"body":{"interfaces/AuthenticationPayload.html":{}}}],["little",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["local",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["localhost",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["logger",{"_index":190,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["logger(userscontroller.name",{"_index":218,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["login",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login(@body",{"_index":238,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["login(loginuserdto",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["login(user",{"_index":625,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logindto",{"_index":199,"title":{"classes/LogInDTO.html":{}},"body":{"interfaces/AuthenticationPayload.html":{},"classes/LogInDTO.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["loginuserdto",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["long",{"_index":517,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["long'})@matches(/((?=.*\\d)|(?=.*\\w+))(?=.*[a",{"_index":500,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["look",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["looks",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["mail",{"_index":743,"title":{},"body":{"injectables/UsersService.html":{}}}],["malformed",{"_index":475,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["manytomany",{"_index":297,"title":{},"body":{"classes/GameEntity.html":{},"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["manytomany(undefined)@column",{"_index":286,"title":{},"body":{"classes/GameEntity.html":{}}}],["map((match",{"_index":751,"title":{},"body":{"injectables/UsersService.html":{}}}],["map((user",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["match",{"_index":408,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/SignUpDTO.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["match('password",{"_index":505,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["match(property",{"_index":400,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["matchconstraint",{"_index":386,"title":{"classes/MatchConstraint.html":{}},"body":{"classes/MatchConstraint.html":{},"coverage.html":{}}}],["matches",{"_index":523,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?=.*[a",{"_index":529,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["matching",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"controllers/GameController.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"modules/GameModule.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":522,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["maxlength(20",{"_index":526,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["maxlength(40",{"_index":527,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["message",{"_index":167,"title":{"interfaces/message.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/ChatRecord.html":{},"classes/LogInDTO.html":{},"classes/RefreshTokenDTO.html":{},"classes/SignUpDTO.html":{},"coverage.html":{},"interfaces/message.html":{}}}],["messages",{"_index":259,"title":{},"body":{"interfaces/ChatRecord.html":{},"interfaces/message.html":{}}}],["metadata",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/MatchConstraint.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["michal",{"_index":836,"title":{},"body":{"index.html":{}}}],["minlength",{"_index":521,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["minlength(3",{"_index":525,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["minlength(4",{"_index":528,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["miscellaneous",{"_index":800,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":843,"title":{},"body":{"index.html":{}}}],["mode",{"_index":825,"title":{},"body":{"index.html":{}}}],["models/refresh",{"_index":435,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["models/user.entity",{"_index":638,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["models/user.interface",{"_index":202,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["modern",{"_index":589,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"miscellaneous/enumerations.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GameModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticationPayload.html":{},"modules/GameModule.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GameModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["move",{"_index":247,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["much",{"_index":716,"title":{},"body":{"injectables/UsersService.html":{}}}],["naive",{"_index":717,"title":{},"body":{"injectables/UsersService.html":{}}}],["name",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"injectables/JwtStrategy.html":{},"classes/MatchConstraint.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["nest",{"_index":813,"title":{},"body":{"index.html":{}}}],["nested",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"controllers/GameController.html":{},"modules/GameModule.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":217,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpassword",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.email",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.password",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.username",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["nightrider",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["normal",{"_index":587,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"miscellaneous/enumerations.html":{}}}],["npm",{"_index":818,"title":{},"body":{"index.html":{}}}],["null",{"_index":210,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/GameInterface.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":260,"title":{},"body":{"interfaces/ChatRecord.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"miscellaneous/enumerations.html":{},"interfaces/message.html":{}}}],["oauth20",{"_index":329,"title":{},"body":{"injectables/GoogleStrategy.html":{},"dependencies.html":{}}}],["object",{"_index":401,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{}}}],["object.constructor",{"_index":404,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{}}}],["observable",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["odd",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{}}}],["of(true",{"_index":747,"title":{},"body":{"injectables/UsersService.html":{}}}],["one",{"_index":722,"title":{},"body":{"injectables/UsersService.html":{}}}],["optional",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ChatRecord.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"injectables/GoogleStrategy.html":{},"interfaces/IconInterface.html":{},"injectables/JwtStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":405,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{}}}],["opts",{"_index":459,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["out",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GameModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":849,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":773,"title":{"dependencies.html":{}},"body":{}}],["parameters",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/MatchConstraint.html":{},"injectables/TokensService.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["passport",{"_index":328,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":326,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":333,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"classes/LogInDTO.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["password).then((user",{"_index":703,"title":{},"body":{"injectables/UsersService.html":{}}}],["passwordconfirm",{"_index":494,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["passwordhash",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["passwords",{"_index":506,"title":{},"body":{"classes/SignUpDTO.html":{},"injectables/UsersService.html":{}}}],["passwordsmatch",{"_index":714,"title":{},"body":{"injectables/UsersService.html":{}}}],["path",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{}}}],["payload",{"_index":186,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"controllers/UsersController.html":{}}}],["payload.jti",{"_index":491,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["payload.sub",{"_index":374,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["payload.username",{"_index":375,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["pipe(map((jwt",{"_index":740,"title":{},"body":{"injectables/UsersService.html":{}}}],["playercolor",{"_index":585,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["players",{"_index":309,"title":{},"body":{"interfaces/GameInterface.html":{}}}],["playersuuid",{"_index":274,"title":{},"body":{"classes/GameEntity.html":{}}}],["playgomoku",{"_index":842,"title":{},"body":{"index.html":{}}}],["port",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":189,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["post('/refresh",{"_index":248,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":237,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["post('login')@usepipes(new",{"_index":626,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('register",{"_index":219,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["post('register')@usepipes(new",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{}}}],["postgres",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GameController.html":{},"controllers/UsersController.html":{}}}],["priceincredits",{"_index":347,"title":{},"body":{"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{}}}],["priceineuro",{"_index":348,"title":{},"body":{"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{}}}],["primarygeneratedcolumn",{"_index":284,"title":{},"body":{"classes/GameEntity.html":{},"classes/IconEntity.html":{},"classes/RefreshTokenEntity.html":{},"classes/SocialBladeSkinEntity.html":{},"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":572,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["private",{"_index":216,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process.env.database_password",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.google_client_id",{"_index":336,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["process.env.google_client_secret",{"_index":338,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["production",{"_index":827,"title":{},"body":{"index.html":{}}}],["profile",{"_index":322,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["prolly",{"_index":720,"title":{},"body":{"injectables/UsersService.html":{}}}],["promise",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"injectables/GoogleStrategy.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":185,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"classes/LogInDTO.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"interfaces/message.html":{}}}],["property",{"_index":407,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/functions.html":{}}}],["propertyname",{"_index":402,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{}}}],["provided",{"_index":734,"title":{},"body":{"injectables/UsersService.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GameModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":444,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["purchasable",{"_index":349,"title":{},"body":{"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{}}}],["quick",{"_index":301,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"miscellaneous/enumerations.html":{}}}],["ranked",{"_index":300,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"miscellaneous/enumerations.html":{}}}],["readline",{"_index":540,"title":{},"body":{"interfaces/SocialBladeSkinInterface.html":{}}}],["readonly",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/RefreshTokenDTO.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"injectables/TokensService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["really",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["refactored",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["reflect",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":231,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"classes/RefreshTokenDTO.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"controllers/UsersController.html":{}}}],["refresh(@body",{"_index":249,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["refresh(body",{"_index":628,"title":{},"body":{"controllers/UsersController.html":{}}}],["refresh_token",{"_index":213,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["refreshtoken",{"_index":254,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"injectables/GoogleStrategy.html":{},"classes/RefreshTokenDTO.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"controllers/UsersController.html":{}}}],["refreshtokendto",{"_index":203,"title":{"classes/RefreshTokenDTO.html":{}},"body":{"interfaces/AuthenticationPayload.html":{},"classes/RefreshTokenDTO.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["refreshtokenentity",{"_index":131,"title":{"classes/RefreshTokenEntity.html":{}},"body":{"modules/AuthModule.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"coverage.html":{}}}],["refreshtokeninterface",{"_index":426,"title":{"interfaces/RefreshTokenInterface.html":{}},"body":{"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"coverage.html":{}}}],["refreshtokenpayload",{"_index":428,"title":{"interfaces/RefreshTokenPayload.html":{}},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"coverage.html":{}}}],["refreshtokenrepository",{"_index":446,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["register",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["register(@body",{"_index":221,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["register(registeruserdto",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{}}}],["register(user",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["registerdecorator",{"_index":396,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{}}}],["registeruserdto",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{}}}],["relatedpropertyname",{"_index":409,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["relatedvalue",{"_index":411,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["repository",{"_index":437,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["req.user",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["require('bcrypt",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":415,"title":{},"body":{"classes/RefreshTokenDTO.html":{}}}],["reset",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GameModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolverefreshtoken",{"_index":466,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["resolverefreshtoken(encoded",{"_index":559,"title":{},"body":{"injectables/TokensService.html":{}}}],["response",{"_index":244,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["responseobject",{"_index":206,"title":{"interfaces/ResponseObject.html":{}},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["result",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"controllers/GameController.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"modules/GameModule.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.errors",{"_index":229,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["result.errors.length",{"_index":226,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["results",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"controllers/GameController.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"modules/GameModule.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"interfaces/message.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/MatchConstraint.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/MatchConstraint.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["revision",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["revoked",{"_index":473,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["rimraf",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":762,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["rootpath",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":822,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["sayahoj",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["scope",{"_index":341,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["searches",{"_index":724,"title":{},"body":{"injectables/UsersService.html":{}}}],["secret",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":372,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secured",{"_index":719,"title":{},"body":{"injectables/UsersService.html":{}}}],["selectedicon",{"_index":598,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["selectedsocialbladeskin",{"_index":600,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["servestaticmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["setmetadata('roles",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shit",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["short",{"_index":513,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["short'})@maxlength(40",{"_index":499,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["signoptions",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"miscellaneous/variables.html":{}}}],["signupdto",{"_index":196,"title":{"classes/SignUpDTO.html":{}},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["socialbladeskin",{"_index":581,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["socialbladeskin.entity",{"_index":582,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["socialbladeskin.interface",{"_index":609,"title":{},"body":{"interfaces/UserInterface.html":{},"interfaces/colors-1.html":{}}}],["socialbladeskinentity",{"_index":530,"title":{"classes/SocialBladeSkinEntity.html":{}},"body":{"classes/SocialBladeSkinEntity.html":{},"classes/UserEntity.html":{},"interfaces/colors.html":{},"coverage.html":{}}}],["socialbladeskininterface",{"_index":538,"title":{"interfaces/SocialBladeSkinInterface.html":{}},"body":{"interfaces/SocialBladeSkinInterface.html":{},"interfaces/UserInterface.html":{},"interfaces/colors-1.html":{},"coverage.html":{}}}],["solution",{"_index":718,"title":{},"body":{"injectables/UsersService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"controllers/GameController.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"modules/GameModule.html":{},"injectables/GameService.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"interfaces/message.html":{}}}],["special",{"_index":511,"title":{},"body":{"classes/SignUpDTO.html":{},"injectables/UsersService.html":{}}}],["src/.../auth.service.ts",{"_index":856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../game.entity.ts",{"_index":804,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../game.interface.ts",{"_index":805,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":807,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../match.decorator.ts",{"_index":808,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token.service.ts",{"_index":855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.entity.ts",{"_index":802,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.interface.ts",{"_index":803,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../usernameexists.decorator.ts",{"_index":809,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:10",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":90,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":91,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:10",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:20",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":639,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/auth.service.ts",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service.ts:12",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:20",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":761,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/refresh",{"_index":204,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"classes/RefreshTokenDTO.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/guards/jwt.guard.ts",{"_index":359,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/models/refresh",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"coverage.html":{}}}],["src/auth/strategies/google.strategy.ts",{"_index":318,"title":{},"body":{"injectables/GoogleStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/google.strategy.ts:19",{"_index":325,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/google.strategy.ts:9",{"_index":320,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:16",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:7",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/token.service",{"_index":193,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["src/auth/token.service.ts",{"_index":429,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/token.service.ts:102",{"_index":546,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/auth/token.service.ts:112",{"_index":550,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/auth/token.service.ts:126",{"_index":558,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/auth/token.service.ts:138",{"_index":556,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/auth/token.service.ts:24",{"_index":544,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/auth/token.service.ts:31",{"_index":548,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/auth/token.service.ts:48",{"_index":551,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/auth/token.service.ts:54",{"_index":552,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/auth/token.service.ts:63",{"_index":554,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/auth/token.service.ts:79",{"_index":560,"title":{},"body":{"injectables/TokensService.html":{}}}],["src/game/game.controller.ts",{"_index":265,"title":{},"body":{"controllers/GameController.html":{},"coverage.html":{}}}],["src/game/game.module.ts",{"_index":314,"title":{},"body":{"modules/GameModule.html":{}}}],["src/game/game.service.ts",{"_index":317,"title":{},"body":{"injectables/GameService.html":{},"coverage.html":{}}}],["src/game/models/chat.interface.ts",{"_index":257,"title":{},"body":{"interfaces/ChatRecord.html":{},"coverage.html":{},"interfaces/message.html":{}}}],["src/game/models/game.entity.ts",{"_index":270,"title":{},"body":{"classes/GameEntity.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/game/models/game.entity.ts:29",{"_index":285,"title":{},"body":{"classes/GameEntity.html":{}}}],["src/game/models/game.entity.ts:33",{"_index":287,"title":{},"body":{"classes/GameEntity.html":{}}}],["src/game/models/game.entity.ts:36",{"_index":279,"title":{},"body":{"classes/GameEntity.html":{}}}],["src/game/models/game.entity.ts:39",{"_index":292,"title":{},"body":{"classes/GameEntity.html":{}}}],["src/game/models/game.entity.ts:42",{"_index":281,"title":{},"body":{"classes/GameEntity.html":{}}}],["src/game/models/game.entity.ts:45",{"_index":288,"title":{},"body":{"classes/GameEntity.html":{}}}],["src/game/models/game.entity.ts:48",{"_index":295,"title":{},"body":{"classes/GameEntity.html":{}}}],["src/game/models/game.entity.ts:51",{"_index":293,"title":{},"body":{"classes/GameEntity.html":{}}}],["src/game/models/game.entity.ts:54",{"_index":283,"title":{},"body":{"classes/GameEntity.html":{}}}],["src/game/models/game.interface.ts",{"_index":308,"title":{},"body":{"interfaces/GameInterface.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/main.ts",{"_index":767,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/log",{"_index":376,"title":{},"body":{"classes/LogInDTO.html":{},"coverage.html":{}}}],["src/users/dto/sign",{"_index":492,"title":{},"body":{"classes/SignUpDTO.html":{},"coverage.html":{}}}],["src/users/models/icon.entity.ts",{"_index":346,"title":{},"body":{"classes/IconEntity.html":{},"coverage.html":{}}}],["src/users/models/icon.entity.ts:12",{"_index":352,"title":{},"body":{"classes/IconEntity.html":{}}}],["src/users/models/icon.entity.ts:15",{"_index":355,"title":{},"body":{"classes/IconEntity.html":{}}}],["src/users/models/icon.entity.ts:18",{"_index":353,"title":{},"body":{"classes/IconEntity.html":{}}}],["src/users/models/icon.entity.ts:21",{"_index":354,"title":{},"body":{"classes/IconEntity.html":{}}}],["src/users/models/icon.entity.ts:6",{"_index":350,"title":{},"body":{"classes/IconEntity.html":{}}}],["src/users/models/icon.entity.ts:9",{"_index":351,"title":{},"body":{"classes/IconEntity.html":{}}}],["src/users/models/icon.interface.ts",{"_index":357,"title":{},"body":{"interfaces/IconInterface.html":{},"coverage.html":{}}}],["src/users/models/socialbladeskin.entity.ts",{"_index":531,"title":{},"body":{"classes/SocialBladeSkinEntity.html":{},"coverage.html":{}}}],["src/users/models/socialbladeskin.entity.ts:12",{"_index":534,"title":{},"body":{"classes/SocialBladeSkinEntity.html":{}}}],["src/users/models/socialbladeskin.entity.ts:15",{"_index":537,"title":{},"body":{"classes/SocialBladeSkinEntity.html":{}}}],["src/users/models/socialbladeskin.entity.ts:18",{"_index":535,"title":{},"body":{"classes/SocialBladeSkinEntity.html":{}}}],["src/users/models/socialbladeskin.entity.ts:21",{"_index":536,"title":{},"body":{"classes/SocialBladeSkinEntity.html":{}}}],["src/users/models/socialbladeskin.entity.ts:6",{"_index":532,"title":{},"body":{"classes/SocialBladeSkinEntity.html":{}}}],["src/users/models/socialbladeskin.entity.ts:9",{"_index":533,"title":{},"body":{"classes/SocialBladeSkinEntity.html":{}}}],["src/users/models/socialbladeskin.interface.ts",{"_index":539,"title":{},"body":{"interfaces/SocialBladeSkinInterface.html":{},"coverage.html":{}}}],["src/users/models/user.entity",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["src/users/models/user.entity.ts",{"_index":561,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/models/user.entity.ts:30",{"_index":573,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:33",{"_index":571,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:36",{"_index":568,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:39",{"_index":566,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:42",{"_index":569,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:45",{"_index":570,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:79",{"_index":574,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.entity.ts:83",{"_index":576,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/users/models/user.interface",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["src/users/models/user.interface.ts",{"_index":606,"title":{},"body":{"interfaces/UserInterface.html":{},"interfaces/colors-1.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/users.controller.ts",{"_index":184,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:106",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:41",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:65",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:89",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":636,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:11",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:118",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:122",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:128",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:55",{"_index":659,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:88",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:99",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/validate",{"_index":387,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":823,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":826,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":828,"title":{},"body":{"index.html":{}}}],["started",{"_index":811,"title":{"index.html":{}},"body":{}}],["starter",{"_index":816,"title":{},"body":{"index.html":{}}}],["statements",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["still",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["strategies/google.strategy",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":327,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"classes/GameEntity.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["string(token.id",{"_index":465,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["string(user.uuid",{"_index":461,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["strong",{"_index":745,"title":{},"body":{"injectables/UsersService.html":{}}}],["sub",{"_index":431,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["subid",{"_index":487,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["subject",{"_index":460,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["success",{"_index":207,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":334,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["support",{"_index":846,"title":{},"body":{"modules.html":{}}}],["surrender",{"_index":305,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"miscellaneous/enumerations.html":{}}}],["svg",{"_index":847,"title":{},"body":{"modules.html":{}}}],["switchmap((passwordhash",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{}}}],["switchmap((user",{"_index":739,"title":{},"body":{"injectables/UsersService.html":{}}}],["synchronize",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":772,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":771,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":725,"title":{},"body":{"injectables/UsersService.html":{}}}],["taken",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{}}}],["target",{"_index":403,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{}}}],["test",{"_index":831,"title":{},"body":{"index.html":{}}}],["test:covstay",{"_index":834,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":833,"title":{},"body":{"index.html":{}}}],["tests",{"_index":830,"title":{},"body":{"index.html":{}}}],["then((passwordsmatch",{"_index":713,"title":{},"body":{"injectables/UsersService.html":{}}}],["then((user",{"_index":705,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.appservice.gethello",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":710,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.comparepassword(password",{"_index":750,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.googlelogin(req",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.hashpassword(password",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.hashpassword(user.password).pipe",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.buildresponsepayload(response",{"_index":245,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["this.buildresponsepayload(user",{"_index":236,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["this.createrefreshtoken(user",{"_index":463,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["this.createuser(username",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.decoderefreshtoken(encoded",{"_index":468,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["this.email",{"_index":602,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["this.email.tolowercase",{"_index":603,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["this.findbyemailorusername(email",{"_index":748,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findbyemailorusername(usernameoremail).then((user",{"_index":708,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findonebyemail(email.tolowercase()).then((user",{"_index":700,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findonebyusername(username.tolowercase()).then((user",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.generateaccesstoken(user",{"_index":478,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["this.getstoredtokenfromrefreshtokenpayload(payload",{"_index":469,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["this.getuserfromrefreshtokenpayload(payload",{"_index":474,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["this.jwtservice.signasync",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":481,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["this.logger.log('register",{"_index":222,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["this.refreshtokenrepository.findone",{"_index":457,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["this.refreshtokenrepository.save(token",{"_index":455,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["this.resolverefreshtoken(refresh",{"_index":477,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["this.tokensservice.createaccesstokenfromrefreshtoken",{"_index":250,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["this.tokensservice.generateaccesstoken(user",{"_index":230,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["this.tokensservice.generateaccesstoken(validateduser",{"_index":243,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["this.tokensservice.generaterefreshtoken",{"_index":232,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["this.username",{"_index":604,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["this.username.tolowercase",{"_index":605,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["this.userrepository.findone",{"_index":488,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.login(user",{"_index":240,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.register(user",{"_index":225,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["this.validateuser(user.email",{"_index":737,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.validateuser(usernameoremail",{"_index":704,"title":{},"body":{"injectables/UsersService.html":{}}}],["throw",{"_index":470,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"injectables/UsersService.html":{}}}],["throwerror(err",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["throwerror(new",{"_index":731,"title":{},"body":{"injectables/UsersService.html":{}}}],["tie",{"_index":294,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"miscellaneous/enumerations.html":{}}}],["time",{"_index":275,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"miscellaneous/enumerations.html":{}}}],["todo",{"_index":246,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":212,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"classes/RefreshTokenDTO.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"controllers/UsersController.html":{}}}],["token.dto",{"_index":205,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["token.dto.ts",{"_index":414,"title":{},"body":{"classes/RefreshTokenDTO.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":416,"title":{},"body":{"classes/RefreshTokenDTO.html":{}}}],["token.entity",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["token.entity.ts",{"_index":417,"title":{},"body":{"classes/RefreshTokenEntity.html":{},"coverage.html":{}}}],["token.entity.ts:12",{"_index":423,"title":{},"body":{"classes/RefreshTokenEntity.html":{}}}],["token.entity.ts:15",{"_index":421,"title":{},"body":{"classes/RefreshTokenEntity.html":{}}}],["token.entity.ts:6",{"_index":422,"title":{},"body":{"classes/RefreshTokenEntity.html":{}}}],["token.entity.ts:9",{"_index":425,"title":{},"body":{"classes/RefreshTokenEntity.html":{}}}],["token.expires",{"_index":454,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["token.interface",{"_index":436,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["token.interface.ts",{"_index":427,"title":{},"body":{"interfaces/RefreshTokenInterface.html":{},"coverage.html":{}}}],["token.isrevoked",{"_index":451,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["token.service",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{}}}],["token.useruuid",{"_index":449,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["tokenexpirederror",{"_index":433,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["tokenid",{"_index":490,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["tokensservice",{"_index":126,"title":{"injectables/TokensService.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"overview.html":{}}}],["touch",{"_index":835,"title":{},"body":{"index.html":{}}}],["traditional",{"_index":588,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"miscellaneous/enumerations.html":{}}}],["true",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"classes/UserEntity.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"interfaces/colors.html":{}}}],["try",{"_index":480,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["ttl",{"_index":448,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["type",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"injectables/GoogleStrategy.html":{},"classes/IconEntity.html":{},"interfaces/IconInterface.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"classes/SignUpDTO.html":{},"classes/SocialBladeSkinEntity.html":{},"interfaces/SocialBladeSkinInterface.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{},"coverage.html":{},"interfaces/message.html":{},"miscellaneous/variables.html":{}}}],["typeofwin",{"_index":276,"title":{},"body":{"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":299,"title":{},"body":{"classes/GameEntity.html":{},"classes/IconEntity.html":{},"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenPayload.html":{},"classes/SocialBladeSkinEntity.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"classes/UsernameExistsConstraint.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([refreshtokenentity",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":815,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["unauthorizedexception('invalid",{"_index":707,"title":{},"body":{"injectables/UsersService.html":{}}}],["unique",{"_index":590,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["unit",{"_index":829,"title":{},"body":{"index.html":{}}}],["unprocessableentityexception",{"_index":432,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["unprocessableentityexception('refresh",{"_index":471,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["up.dto",{"_index":198,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["up.dto.ts",{"_index":493,"title":{},"body":{"classes/SignUpDTO.html":{},"coverage.html":{}}}],["up.dto.ts:17",{"_index":519,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["up.dto.ts:21",{"_index":497,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["up.dto.ts:29",{"_index":504,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["up.dto.ts:32",{"_index":508,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["updateone(uuid",{"_index":735,"title":{},"body":{"injectables/UsersService.html":{}}}],["use",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{}}}],["usefactory",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["useguards(authguard('google",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["usepipes",{"_index":191,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["usepipes(new",{"_index":220,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"classes/GameEntity.html":{},"interfaces/GameInterface.html":{},"injectables/GoogleStrategy.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"classes/UsernameExistsConstraint.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/message.html":{}}}],["user's",{"_index":442,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["user.email",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password",{"_index":712,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password).pipe",{"_index":738,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.username",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.uuid",{"_index":450,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{}}}],["userentity",{"_index":64,"title":{"classes/UserEntity.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/GameEntity.html":{},"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"classes/UsernameExistsConstraint.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"coverage.html":{}}}],["userid",{"_index":373,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["userinterface",{"_index":170,"title":{"interfaces/UserInterface.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticationPayload.html":{},"interfaces/ChatRecord.html":{},"interfaces/GameInterface.html":{},"interfaces/RefreshTokenPayload.html":{},"interfaces/ResponseObject.html":{},"injectables/TokensService.html":{},"interfaces/UserInterface.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/colors-1.html":{},"coverage.html":{},"interfaces/message.html":{}}}],["username",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"classes/LogInDTO.html":{},"classes/SignUpDTO.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"classes/UsernameExistsConstraint.html":{},"injectables/UsersService.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["username).pipe",{"_index":749,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernameexists",{"_index":770,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["usernameexists(validationoptions",{"_index":618,"title":{},"body":{"classes/UsernameExistsConstraint.html":{},"miscellaneous/functions.html":{}}}],["usernameexistsconstraint",{"_index":611,"title":{"classes/UsernameExistsConstraint.html":{}},"body":{"classes/UsernameExistsConstraint.html":{},"coverage.html":{}}}],["usernameoremail",{"_index":378,"title":{},"body":{"classes/LogInDTO.html":{},"injectables/UsersService.html":{}}}],["usernameoremail.includes",{"_index":728,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernametolowercase",{"_index":565,"title":{},"body":{"classes/UserEntity.html":{},"interfaces/colors.html":{}}}],["userrepository",{"_index":445,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"classes/UsernameExistsConstraint.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrepository.findone(username).then((user",{"_index":617,"title":{},"body":{"classes/UsernameExistsConstraint.html":{}}}],["users",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":637,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":195,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/models/user.entity",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"classes/GameEntity.html":{},"classes/UsernameExistsConstraint.html":{}}}],["users/models/user.interface",{"_index":261,"title":{},"body":{"interfaces/ChatRecord.html":{},"interfaces/GameInterface.html":{},"interfaces/message.html":{}}}],["users/users.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":215,"title":{"controllers/UsersController.html":{}},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":46,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":194,"title":{"injectables/UsersService.html":{}},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["useruuid",{"_index":420,"title":{},"body":{"classes/RefreshTokenEntity.html":{},"interfaces/RefreshTokenInterface.html":{}}}],["uuid",{"_index":443,"title":{},"body":{"interfaces/RefreshTokenPayload.html":{},"injectables/TokensService.html":{},"classes/UserEntity.html":{},"interfaces/UserInterface.html":{},"interfaces/colors.html":{},"interfaces/colors-1.html":{}}}],["valid",{"_index":726,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate",{"_index":319,"title":{},"body":{"injectables/GoogleStrategy.html":{},"injectables/JwtStrategy.html":{},"classes/MatchConstraint.html":{},"classes/SignUpDTO.html":{},"classes/UsernameExistsConstraint.html":{},"injectables/UsersService.html":{}}}],["validate(accesstoken",{"_index":321,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["validate(payload",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":613,"title":{},"body":{"classes/UsernameExistsConstraint.html":{}}}],["validate(value",{"_index":391,"title":{},"body":{"classes/MatchConstraint.html":{}}}],["validateduser",{"_index":239,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["validateuser",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser(usernameoremail",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["validationarguments",{"_index":393,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{}}}],["validationoptions",{"_index":397,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{},"miscellaneous/functions.html":{}}}],["validationpipe",{"_index":192,"title":{},"body":{"interfaces/AuthenticationPayload.html":{},"interfaces/ResponseObject.html":{},"controllers/UsersController.html":{}}}],["validator",{"_index":385,"title":{},"body":{"classes/LogInDTO.html":{},"classes/MatchConstraint.html":{},"classes/RefreshTokenDTO.html":{},"classes/SignUpDTO.html":{},"classes/UsernameExistsConstraint.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":398,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{}}}],["validatorconstraintinterface",{"_index":390,"title":{},"body":{"classes/MatchConstraint.html":{},"classes/UsernameExistsConstraint.html":{}}}],["value",{"_index":395,"title":{},"body":{"classes/MatchConstraint.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":854,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vaňata",{"_index":837,"title":{},"body":{"index.html":{}}}],["verifycallback",{"_index":324,"title":{},"body":{"injectables/GoogleStrategy.html":{}}}],["very",{"_index":715,"title":{},"body":{"injectables/UsersService.html":{}}}],["void",{"_index":575,"title":{},"body":{"classes/UserEntity.html":{}}}],["watch",{"_index":824,"title":{},"body":{"index.html":{}}}],["weak",{"_index":503,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["website",{"_index":838,"title":{},"body":{"index.html":{}}}],["weren't",{"_index":733,"title":{},"body":{"injectables/UsersService.html":{}}}],["winner",{"_index":310,"title":{},"body":{"interfaces/GameInterface.html":{}}}],["winneruuid",{"_index":277,"title":{},"body":{"classes/GameEntity.html":{}}}],["world",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["wrong",{"_index":741,"title":{},"body":{"injectables/UsersService.html":{}}}],["yes",{"_index":624,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["z",{"_index":502,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["z])(?=.*[a",{"_index":501,"title":{},"body":{"classes/SignUpDTO.html":{}}}],["zoom",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/GameModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, UseGuards } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { UserEntity } from './users/models/user.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      host: 'localhost',\n      port: 5432,\n      username: 'nightrider',\n      password: process.env.DATABASE_PASSWORD,\n      database: 'gomokuDatabase',\n      entities: [UserEntity],\n      synchronize: true,\n    }),\n    TypeOrmModule.forFeature([UserEntity]),\n    AuthModule,\n    UsersModule,\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'dist/public'),\n    }),\n\n    // GameModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                googleAuth\n                            \n                            \n                                googleAuthRedirect\n                            \n                            \n                                sayAhoj\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            googleAuth\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    googleAuth(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            googleAuthRedirect\n                        \n                        \n                    \n                \n            \n            \n                \ngoogleAuthRedirect(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('google/redirect')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sayAhoj\n                        \n                        \n                    \n                \n            \n            \n                \nsayAhoj()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Get()\n  sayAhoj() {\n    return 'Say ahoj';\n  }\n\n  @Get('google')\n  @UseGuards(AuthGuard('google'))\n  async googleAuth(@Req() req) {}\n\n  @Get('google/redirect')\n  @UseGuards(AuthGuard('google'))\n  googleAuthRedirect(@Req() req) {\n    return this.authService.googleLogin(req);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nTokensService\n\nTokensService\n\nAuthModule -->\n\nTokensService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            GoogleStrategy\n                        \n                        \n                            TokensService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { RefreshTokenEntity } from 'src/auth/models/refresh-token.entity';\nimport { UserEntity } from 'src/users/models/user.entity';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { GoogleStrategy } from './strategies/google.strategy';\nimport { TokensService } from './token.service';\n\n@Module({\n  imports: [\n    JwtModule.registerAsync({\n      imports: [TypeOrmModule.forFeature([RefreshTokenEntity]), ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '1h' },\n      }),\n    }),\n    TypeOrmModule.forFeature([RefreshTokenEntity]),\n    TypeOrmModule.forFeature([UserEntity]),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, TokensService, GoogleStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                generateJWT\n                            \n                            \n                                googleLogin\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            comparePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    comparePassword(newPassword: string, passwordHash: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    passwordHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            generateJWT\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateJWT(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            googleLogin\n                        \n                        \n                    \n                \n            \n            \n                \ngoogleLogin(req)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         \"No user from google\" | { message: string; user: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UserInterface as User } from 'src/users/models/user.interface';\n\nconst bcrypt = require('bcrypt');\n\n@Injectable()\nexport class AuthService {\n  constructor(private readonly jwtService: JwtService) {}\n\n  async generateJWT(user: User): Promise {\n    return this.jwtService.signAsync({ user });\n  }\n\n  async hashPassword(password: string): Promise {\n    return bcrypt.hash(password, 13);\n  }\n\n  async comparePassword(\n    newPassword: string,\n    passwordHash: string,\n  ): Promise {\n    return bcrypt.compare(newPassword, passwordHash);\n  }\n\n  googleLogin(req) {\n    if (!req.user) {\n      return 'No user from google';\n    }\n\n    return {\n      message: 'User information from google',\n      user: req.user,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticationPayload.html":{"url":"interfaces/AuthenticationPayload.html","title":"interface - AuthenticationPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AuthenticationPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        payload\n                                \n                                \n                                        user\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        payload\n                                    \n                                \n                                \n                                    \n                                        payload:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                    \n                                \n                                \n                                    \n                                        user:     User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Logger,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { TokensService } from 'src/auth/token.service';\nimport { UsersService } from './users.service';\nimport { SignUpDTO } from './dto/sign-up.dto';\nimport { LogInDTO } from './dto/log-in.dto';\nimport { UserInterface as User } from './models/user.interface';\nimport { RefreshTokenDTO } from 'src/auth/dto/refresh-token.dto';\n\ninterface ResponseObject {\n  success: boolean;\n  data: AuthenticationPayload | null;\n  errors: string[];\n}\n\ninterface AuthenticationPayload {\n  user: User;\n  payload: {\n    type: string;\n    token: string;\n    refresh_token?: string;\n  };\n}\n\n@Controller('users')\nexport class UsersController {\n  constructor(\n    private readonly usersService: UsersService,\n    private tokensService: TokensService,\n  ) {}\n  private readonly logger = new Logger(UsersController.name);\n\n  @Post('register')\n  @UsePipes(new ValidationPipe())\n  async register(@Body() user: SignUpDTO): Promise {\n    this.logger.log('Register hit');\n    const result = await this.usersService.register(user);\n\n    if (result.errors.length > 0)\n      return { success: false, data: null, errors: result.errors };\n\n    const token = await this.tokensService.generateAccessToken(user);\n    const refresh = await this.tokensService.generateRefreshToken(\n      user,\n      60 * 60 * 24 * 30,\n    );\n\n    const payload = this.buildResponsePayload(user, token, refresh);\n\n    return {\n      success: true,\n      data: payload,\n      errors: [],\n    };\n  }\n\n  @Post('login')\n  @UsePipes(new ValidationPipe())\n  async login(@Body() user: LogInDTO): Promise {\n    const validatedUser = await this.usersService.login(user);\n    if (!validatedUser)\n      return { success: false, data: null, errors: ['Invalid Credentials'] };\n\n    const token = await this.tokensService.generateAccessToken(validatedUser);\n    const refresh = await this.tokensService.generateRefreshToken(\n      validatedUser,\n      60 * 60 * 24 * 30,\n    );\n\n    const { password, ...response } = validatedUser;\n\n    const payload = this.buildResponsePayload(response, token, refresh);\n\n    return {\n      success: true,\n      data: payload,\n      errors: [],\n    };\n  }\n\n  // TODO move to auth module\n  @Post('/refresh')\n  async refresh(@Body() body: RefreshTokenDTO): Promise {\n    const {\n      user,\n      token,\n    } = await this.tokensService.createAccessTokenFromRefreshToken(\n      body.refreshToken,\n    );\n\n    const payload = this.buildResponsePayload(user, token);\n\n    return {\n      success: true,\n      data: payload,\n      errors: [],\n    };\n  }\n\n  private buildResponsePayload(\n    user: User,\n    accessToken: string,\n    refreshToken?: string,\n  ): AuthenticationPayload {\n    return {\n      user: user,\n      payload: {\n        type: 'bearer',\n        token: accessToken,\n        ...(refreshToken ? { refresh_token: refreshToken } : {}),\n      },\n    };\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChatRecord.html":{"url":"interfaces/ChatRecord.html","title":"interface - ChatRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ChatRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/game/models/chat.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        messages\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        messages\n                                    \n                                \n                                \n                                    \n                                        messages:         message[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         message[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserInterface as User } from '../../users/models/user.interface';\ninterface message {\n  author: string;\n  content: string;\n}\n\nexport interface ChatRecord {\n  id?: number;\n  messages?: message[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GameController.html":{"url":"controllers/GameController.html","title":"controller - GameController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GameController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/game/game.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                game\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('game')\nexport class GameController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GameEntity.html":{"url":"classes/GameEntity.html","title":"class - GameEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GameEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/game/models/game.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                date\n                            \n                            \n                                    Optional\n                                eloDifference\n                            \n                            \n                                    Optional\n                                finalState\n                            \n                            \n                                id\n                            \n                            \n                                playersUUID\n                            \n                            \n                                    Optional\n                                time\n                            \n                            \n                                    Optional\n                                type\n                            \n                            \n                                    Optional\n                                typeOfWin\n                            \n                            \n                                    Optional\n                                winnerUUID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Date[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/game/models/game.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            eloDifference\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/game/models/game.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            finalState\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number[][]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/game/models/game.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/game/models/game.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            playersUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     User[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined)@Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/game/models/game.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            time\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/game/models/game.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         gameType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: gameType})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/game/models/game.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            typeOfWin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         typeOfWin\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: typeOfWin})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/game/models/game.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            winnerUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 'tie'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/game/models/game.entity.ts:48\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  ManyToMany,\n  BeforeInsert,\n} from 'typeorm';\n\nimport { UserEntity as User } from '../../users/models/user.entity';\n\nenum gameType {\n  RANKED = 'ranked',\n  QUICK = 'quick',\n  CUSTOM = 'custom',\n  NUMBER = 1,\n}\n\nenum typeOfWin {\n  COMBINATION = 'combination',\n  TIME = 'time',\n  SURRENDER = 'surrender',\n  TIE = 'tie',\n}\n\n@Entity()\nexport class GameEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @ManyToMany(() => User)\n  @Column()\n  playersUUID: User[];\n\n  @CreateDateColumn()\n  date?: Date[];\n\n  @Column({ type: 'enum', enum: gameType })\n  type?: gameType;\n\n  @Column({ default: 0 })\n  eloDifference?: number;\n\n  @Column()\n  time?: number;\n\n  @Column({ default: 'tie' })\n  winnerUUID?: string;\n\n  @Column({ type: 'enum', enum: typeOfWin })\n  typeOfWin?: typeOfWin;\n\n  @Column()\n  finalState?: number[][];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GameInterface.html":{"url":"interfaces/GameInterface.html","title":"interface - GameInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  GameInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/game/models/game.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        date\n                                \n                                \n                                            Optional\n                                        eloDifference\n                                \n                                \n                                            Optional\n                                        finalState\n                                \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        players\n                                \n                                \n                                            Optional\n                                        time\n                                \n                                \n                                            Optional\n                                        type\n                                \n                                \n                                            Optional\n                                        typeOfWin\n                                \n                                \n                                            Optional\n                                        winner\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:     Date[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eloDifference\n                                    \n                                \n                                \n                                    \n                                        eloDifference:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        finalState\n                                    \n                                \n                                \n                                    \n                                        finalState:     number[][]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[][]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        players\n                                    \n                                \n                                \n                                    \n                                        players:     User[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     User[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        time\n                                    \n                                \n                                \n                                    \n                                        time:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         gameType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         gameType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        typeOfWin\n                                    \n                                \n                                \n                                    \n                                        typeOfWin:         typeOfWin\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         typeOfWin\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        winner\n                                    \n                                \n                                \n                                    \n                                        winner:     User | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     User | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserInterface as User } from '../../users/models/user.interface';\n\nenum gameType {\n  RANKED = 'ranked',\n  QUICK = 'quick',\n  CUSTOM = 'custom',\n}\n\nenum typeOfWin {\n  COMBINATION = 'combination',\n  TIME = 'time',\n  SURRENDER = 'surrender',\n  TIE = 'tie',\n}\n\nexport interface GameInterface {\n  id?: number;\n  players?: User[];\n  date?: Date[];\n  type?: gameType;\n  eloDifference?: number;\n  time?: number;\n  winner?: User | null;\n  typeOfWin?: typeOfWin;\n  finalState?: number[][];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GameModule.html":{"url":"modules/GameModule.html","title":"module - GameModule","body":"\n                   \n\n\n\n\n    Modules\n    GameModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GameModule\n\n\n\ncluster_GameModule_providers\n\n\n\n\nGameService\n\nGameService\n\n\n\nGameModule\n\nGameModule\n\nGameModule -->\n\nGameService->GameModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/game/game.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GameService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GameController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GameController } from './game.controller';\nimport { GameService } from './game.service';\n\n@Module({\n  controllers: [GameController],\n  providers: [GameService]\n})\nexport class GameModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GameService.html":{"url":"injectables/GameService.html","title":"injectable - GameService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GameService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/game/game.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class GameService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleStrategy.html":{"url":"injectables/GoogleStrategy.html","title":"injectable - GoogleStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GoogleStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/google.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/google.strategy.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/google.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    profile\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    done\n                                    \n                                            VerifyCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth20';\nimport { config } from 'dotenv';\nimport { Injectable } from '@nestjs/common';\n\nconfig();\n\n@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n  constructor() {\n    super({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL: 'http://localhost:3000/api/auth/google/redirect',\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ): Promise {\n    const { emails } = profile;\n    const user = {\n      email: emails[0].value,\n      accessToken,\n    };\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IconEntity.html":{"url":"classes/IconEntity.html","title":"class - IconEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IconEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/icon.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                path\n                            \n                            \n                                priceInCredits\n                            \n                            \n                                priceInEuro\n                            \n                            \n                                purchasable\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/icon.entity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/icon.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/icon.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            priceInCredits\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/icon.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            priceInEuro\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/icon.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            purchasable\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/icon.entity.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class IconEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  path: string;\n\n  @Column()\n  purchasable: boolean;\n\n  @Column()\n  priceInCredits: number;\n\n  @Column()\n  priceInEuro: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IconInterface.html":{"url":"interfaces/IconInterface.html","title":"interface - IconInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IconInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/icon.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        path\n                                \n                                \n                                            Optional\n                                        priceInCredits\n                                \n                                \n                                            Optional\n                                        priceInEuro\n                                \n                                \n                                            Optional\n                                        purchasable\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priceInCredits\n                                    \n                                \n                                \n                                    \n                                        priceInCredits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priceInEuro\n                                    \n                                \n                                \n                                    \n                                        priceInEuro:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        purchasable\n                                    \n                                \n                                \n                                    \n                                        purchasable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IconInterface {\n  id?: number;\n  name?: string;\n  path?: string;\n  purchasable?: boolean;\n  priceInCredits?: number;\n  priceInEuro?: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    return { userId: payload.sub, username: payload.username };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogInDTO.html":{"url":"classes/LogInDTO.html","title":"class - LogInDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogInDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/log-in.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                usernameOrEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty({message: 'Invalid password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/log-in.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            usernameOrEmail\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsAlphanumeric('en-US', {message: 'Invalid username'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/log-in.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsAlphanumeric } from 'class-validator';\n\nexport class LogInDTO {\n  @IsAlphanumeric('en-US', { message: 'Invalid username' })\n  readonly usernameOrEmail: string;\n\n  @IsNotEmpty({ message: 'Invalid password' })\n  readonly password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MatchConstraint.html":{"url":"classes/MatchConstraint.html","title":"class - MatchConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MatchConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validate-decorators/match.decorator.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(value: any, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/validate-decorators/match.decorator.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\nexport function Match(property: string, validationOptions?: ValidationOptions) {\n  return (object: any, propertyName: string) => {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [property],\n      validator: MatchConstraint,\n    });\n  };\n}\n\n@ValidatorConstraint({ name: 'Match' })\nexport class MatchConstraint implements ValidatorConstraintInterface {\n  validate(value: any, args: ValidationArguments) {\n    const [relatedPropertyName] = args.constraints;\n    const relatedValue = (args.object as any)[relatedPropertyName];\n    return value === relatedValue;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDTO.html":{"url":"classes/RefreshTokenDTO.html","title":"class - RefreshTokenDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/refresh-token.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            refreshToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty({message: 'The refresh token is required'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/refresh-token.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\nexport class RefreshTokenDTO {\n  @IsNotEmpty({ message: 'The refresh token is required' })\n  readonly refreshToken: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenEntity.html":{"url":"classes/RefreshTokenEntity.html","title":"class - RefreshTokenEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/models/refresh-token.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires\n                            \n                            \n                                id\n                            \n                            \n                                isRevoked\n                            \n                            \n                                userUUID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expires\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/models/refresh-token.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/models/refresh-token.entity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isRevoked\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/models/refresh-token.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userUUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/models/refresh-token.entity.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class RefreshTokenEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column('uuid')\n  userUUID: string;\n\n  @Column()\n  isRevoked: boolean;\n\n  @Column()\n  expires: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshTokenInterface.html":{"url":"interfaces/RefreshTokenInterface.html","title":"interface - RefreshTokenInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RefreshTokenInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/models/refresh-token.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        expires\n                                \n                                \n                                        id\n                                \n                                \n                                        isRevoked\n                                \n                                \n                                        userUUID\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expires\n                                    \n                                \n                                \n                                    \n                                        expires:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isRevoked\n                                    \n                                \n                                \n                                    \n                                        isRevoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userUUID\n                                    \n                                \n                                \n                                    \n                                        userUUID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RefreshTokenInterface {\n  id: number;\n  userUUID: string;\n  isRevoked: boolean;\n  expires: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshTokenPayload.html":{"url":"interfaces/RefreshTokenPayload.html","title":"interface - RefreshTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RefreshTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.service.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        jti\n                                \n                                \n                                        sub\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        jti\n                                    \n                                \n                                \n                                    \n                                        jti:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UnprocessableEntityException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { SignOptions, TokenExpiredError } from 'jsonwebtoken';\n\nimport { RefreshTokenEntity } from './models/refresh-token.entity';\nimport { RefreshTokenInterface as RefreshToken } from './models/refresh-token.interface';\nimport { UserInterface as User } from 'src/users/models/user.interface';\nimport { Repository } from 'typeorm';\nimport { UserEntity } from 'src/users/models/user.entity';\n\nconst BASE_OPTIONS: SignOptions = {\n  issuer: 'https://playgomoku.com',\n  audience: 'https://playgomoku.com',\n};\n\nexport interface RefreshTokenPayload {\n  // Token ID\n  jti: number;\n  // User's UUID\n  sub: string;\n}\n\n@Injectable()\nexport class TokensService {\n  public constructor(\n    private readonly userRepository: Repository,\n    private readonly jwtService: JwtService,\n    private readonly refreshTokenRepository: Repository,\n  ) {}\n\n  public async createRefreshToken(\n    user: User,\n    ttl: number,\n  ): Promise {\n    const token = new RefreshTokenEntity();\n\n    token.userUUID = user.uuid;\n    token.isRevoked = false;\n\n    const expiration = new Date();\n    expiration.setTime(expiration.getTime() + ttl);\n\n    token.expires = expiration;\n\n    return this.refreshTokenRepository.save(token);\n  }\n\n  public async findTokenByID(id: number): Promise {\n    return this.refreshTokenRepository.findOne({\n      id,\n    });\n  }\n\n  public async generateAccessToken(user: User): Promise {\n    const opts: SignOptions = {\n      ...BASE_OPTIONS,\n      subject: String(user.uuid),\n    };\n\n    return this.jwtService.signAsync({}, opts);\n  }\n\n  public async generateRefreshToken(\n    user: User,\n    expiresIn: number,\n  ): Promise {\n    const token = await this.createRefreshToken(user, expiresIn);\n\n    const opts: SignOptions = {\n      ...BASE_OPTIONS,\n      expiresIn,\n      subject: String(user.uuid),\n      jwtid: String(token.id),\n    };\n\n    return this.jwtService.signAsync({}, opts);\n  }\n\n  public async resolveRefreshToken(\n    encoded: string,\n  ): Promise {\n    const payload = await this.decodeRefreshToken(encoded);\n    const token = await this.getStoredTokenFromRefreshTokenPayload(payload);\n\n    if (!token) {\n      throw new UnprocessableEntityException('Refresh token not found');\n    }\n\n    if (token.isRevoked) {\n      throw new UnprocessableEntityException('Refresh token revoked');\n    }\n\n    const user = await this.getUserFromRefreshTokenPayload(payload);\n\n    if (!user) {\n      throw new UnprocessableEntityException('Refresh token malformed');\n    }\n\n    return { user, token };\n  }\n\n  public async createAccessTokenFromRefreshToken(\n    refresh: string,\n  ): Promise {\n    const { user } = await this.resolveRefreshToken(refresh);\n\n    const token = await this.generateAccessToken(user);\n\n    return { user, token };\n  }\n\n  private async decodeRefreshToken(\n    token: string,\n  ): Promise {\n    try {\n      return this.jwtService.verifyAsync(token);\n    } catch (e) {\n      if (e instanceof TokenExpiredError) {\n        throw new UnprocessableEntityException('Refresh token expired');\n      } else {\n        throw new UnprocessableEntityException('Refresh token malformed');\n      }\n    }\n  }\n\n  private async getUserFromRefreshTokenPayload(\n    payload: RefreshTokenPayload,\n  ): Promise {\n    const subId = payload.sub;\n\n    if (!subId) {\n      throw new UnprocessableEntityException('Refresh token malformed');\n    }\n\n    return this.userRepository.findOne({ UUID: subId });\n  }\n\n  private async getStoredTokenFromRefreshTokenPayload(\n    payload: RefreshTokenPayload,\n  ): Promise {\n    const tokenId = payload.jti;\n\n    if (!tokenId) {\n      throw new UnprocessableEntityException('Refresh token malformed');\n    }\n\n    return this.refreshTokenRepository.findOne({ id: tokenId });\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResponseObject.html":{"url":"interfaces/ResponseObject.html","title":"interface - ResponseObject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ResponseObject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        errors\n                                \n                                \n                                        success\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:         AuthenticationPayload | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticationPayload | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                    \n                                \n                                \n                                    \n                                        errors:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Logger,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { TokensService } from 'src/auth/token.service';\nimport { UsersService } from './users.service';\nimport { SignUpDTO } from './dto/sign-up.dto';\nimport { LogInDTO } from './dto/log-in.dto';\nimport { UserInterface as User } from './models/user.interface';\nimport { RefreshTokenDTO } from 'src/auth/dto/refresh-token.dto';\n\ninterface ResponseObject {\n  success: boolean;\n  data: AuthenticationPayload | null;\n  errors: string[];\n}\n\ninterface AuthenticationPayload {\n  user: User;\n  payload: {\n    type: string;\n    token: string;\n    refresh_token?: string;\n  };\n}\n\n@Controller('users')\nexport class UsersController {\n  constructor(\n    private readonly usersService: UsersService,\n    private tokensService: TokensService,\n  ) {}\n  private readonly logger = new Logger(UsersController.name);\n\n  @Post('register')\n  @UsePipes(new ValidationPipe())\n  async register(@Body() user: SignUpDTO): Promise {\n    this.logger.log('Register hit');\n    const result = await this.usersService.register(user);\n\n    if (result.errors.length > 0)\n      return { success: false, data: null, errors: result.errors };\n\n    const token = await this.tokensService.generateAccessToken(user);\n    const refresh = await this.tokensService.generateRefreshToken(\n      user,\n      60 * 60 * 24 * 30,\n    );\n\n    const payload = this.buildResponsePayload(user, token, refresh);\n\n    return {\n      success: true,\n      data: payload,\n      errors: [],\n    };\n  }\n\n  @Post('login')\n  @UsePipes(new ValidationPipe())\n  async login(@Body() user: LogInDTO): Promise {\n    const validatedUser = await this.usersService.login(user);\n    if (!validatedUser)\n      return { success: false, data: null, errors: ['Invalid Credentials'] };\n\n    const token = await this.tokensService.generateAccessToken(validatedUser);\n    const refresh = await this.tokensService.generateRefreshToken(\n      validatedUser,\n      60 * 60 * 24 * 30,\n    );\n\n    const { password, ...response } = validatedUser;\n\n    const payload = this.buildResponsePayload(response, token, refresh);\n\n    return {\n      success: true,\n      data: payload,\n      errors: [],\n    };\n  }\n\n  // TODO move to auth module\n  @Post('/refresh')\n  async refresh(@Body() body: RefreshTokenDTO): Promise {\n    const {\n      user,\n      token,\n    } = await this.tokensService.createAccessTokenFromRefreshToken(\n      body.refreshToken,\n    );\n\n    const payload = this.buildResponsePayload(user, token);\n\n    return {\n      success: true,\n      data: payload,\n      errors: [],\n    };\n  }\n\n  private buildResponsePayload(\n    user: User,\n    accessToken: string,\n    refreshToken?: string,\n  ): AuthenticationPayload {\n    return {\n      user: user,\n      payload: {\n        type: 'bearer',\n        token: accessToken,\n        ...(refreshToken ? { refresh_token: refreshToken } : {}),\n      },\n    };\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpDTO.html":{"url":"classes/SignUpDTO.html","title":"class - SignUpDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/sign-up.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                passwordConfirm\n                            \n                            \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail({}, {message: 'Invalid email'})@MaxLength(40, {message: 'Invalid email'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/sign-up.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(4, {message: 'Password is too short'})@MaxLength(40, {message: 'Password is too long'})@Matches(/((?=.*\\d)|(?=.*\\W+))(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password is too weak'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/sign-up.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            passwordConfirm\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Match('password', {message: 'Passwords don't match'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/sign-up.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsAlphanumeric('en-US', {message: 'Username can't contain special characters'})@MinLength(3, {message: 'Username is too short (3-20 characters)'})@MaxLength(20, {message: 'Username is too long (3-20 characters)'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/sign-up.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsString,\n  MinLength,\n  MaxLength,\n  Matches,\n  IsAlphanumeric,\n} from 'class-validator';\nimport { Match } from '../../validate-decorators/match.decorator';\n\nexport class SignUpDTO {\n  @IsAlphanumeric('en-US', {\n    message: \"Username can't contain special characters\",\n  })\n  @MinLength(3, { message: 'Username is too short (3-20 characters)' })\n  @MaxLength(20, { message: 'Username is too long (3-20 characters)' })\n  readonly username: string;\n\n  @IsEmail({}, { message: 'Invalid email' })\n  @MaxLength(40, { message: 'Invalid email' })\n  readonly email: string;\n\n  @IsString()\n  @MinLength(4, { message: 'Password is too short' })\n  @MaxLength(40, { message: 'Password is too long' })\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Password is too weak',\n  })\n  readonly password: string;\n\n  @Match('password', { message: \"Passwords don't match\" })\n  readonly passwordConfirm: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SocialBladeSkinEntity.html":{"url":"classes/SocialBladeSkinEntity.html","title":"class - SocialBladeSkinEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SocialBladeSkinEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/socialBladeSkin.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                path\n                            \n                            \n                                priceInCredits\n                            \n                            \n                                priceInEuro\n                            \n                            \n                                purchasable\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/socialBladeSkin.entity.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/socialBladeSkin.entity.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/socialBladeSkin.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            priceInCredits\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/socialBladeSkin.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            priceInEuro\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/socialBladeSkin.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            purchasable\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/socialBladeSkin.entity.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class SocialBladeSkinEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  path: string;\n\n  @Column()\n  purchasable: boolean;\n\n  @Column()\n  priceInCredits: number;\n\n  @Column()\n  priceInEuro: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SocialBladeSkinInterface.html":{"url":"interfaces/SocialBladeSkinInterface.html","title":"interface - SocialBladeSkinInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SocialBladeSkinInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/socialBladeSkin.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        id\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                            Optional\n                                        path\n                                \n                                \n                                            Optional\n                                        priceInCredits\n                                \n                                \n                                            Optional\n                                        priceInEuro\n                                \n                                \n                                            Optional\n                                        purchasable\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priceInCredits\n                                    \n                                \n                                \n                                    \n                                        priceInCredits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priceInEuro\n                                    \n                                \n                                \n                                    \n                                        priceInEuro:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        purchasable\n                                    \n                                \n                                \n                                    \n                                        purchasable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Interface } from 'readline';\n\nexport interface SocialBladeSkinInterface {\n  id?: number;\n  name?: string;\n  path?: string;\n  purchasable?: boolean;\n  priceInCredits?: number;\n  priceInEuro?: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokensService.html":{"url":"injectables/TokensService.html","title":"injectable - TokensService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TokensService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAccessTokenFromRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                createRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                decodeRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                findTokenByID\n                            \n                            \n                                    Public\n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Public\n                                    Async\n                                generateRefreshToken\n                            \n                            \n                                    Private\n                                    Async\n                                getStoredTokenFromRefreshTokenPayload\n                            \n                            \n                                    Private\n                                    Async\n                                getUserFromRefreshTokenPayload\n                            \n                            \n                                    Public\n                                    Async\n                                resolveRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(userRepository: Repository, jwtService: JwtService, refreshTokenRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/token.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        refreshTokenRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAccessTokenFromRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccessTokenFromRefreshToken(refresh: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refresh\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createRefreshToken(user: User, ttl: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ttl\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            decodeRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeRefreshToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            findTokenByID\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findTokenByID(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            generateAccessToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateAccessToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            generateRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRefreshToken(user: User, expiresIn: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    expiresIn\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getStoredTokenFromRefreshTokenPayload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getStoredTokenFromRefreshTokenPayload(payload: RefreshTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RefreshTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            getUserFromRefreshTokenPayload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromRefreshTokenPayload(payload: RefreshTokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RefreshTokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            resolveRefreshToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resolveRefreshToken(encoded: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/token.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    encoded\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UnprocessableEntityException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { SignOptions, TokenExpiredError } from 'jsonwebtoken';\n\nimport { RefreshTokenEntity } from './models/refresh-token.entity';\nimport { RefreshTokenInterface as RefreshToken } from './models/refresh-token.interface';\nimport { UserInterface as User } from 'src/users/models/user.interface';\nimport { Repository } from 'typeorm';\nimport { UserEntity } from 'src/users/models/user.entity';\n\nconst BASE_OPTIONS: SignOptions = {\n  issuer: 'https://playgomoku.com',\n  audience: 'https://playgomoku.com',\n};\n\nexport interface RefreshTokenPayload {\n  // Token ID\n  jti: number;\n  // User's UUID\n  sub: string;\n}\n\n@Injectable()\nexport class TokensService {\n  public constructor(\n    private readonly userRepository: Repository,\n    private readonly jwtService: JwtService,\n    private readonly refreshTokenRepository: Repository,\n  ) {}\n\n  public async createRefreshToken(\n    user: User,\n    ttl: number,\n  ): Promise {\n    const token = new RefreshTokenEntity();\n\n    token.userUUID = user.uuid;\n    token.isRevoked = false;\n\n    const expiration = new Date();\n    expiration.setTime(expiration.getTime() + ttl);\n\n    token.expires = expiration;\n\n    return this.refreshTokenRepository.save(token);\n  }\n\n  public async findTokenByID(id: number): Promise {\n    return this.refreshTokenRepository.findOne({\n      id,\n    });\n  }\n\n  public async generateAccessToken(user: User): Promise {\n    const opts: SignOptions = {\n      ...BASE_OPTIONS,\n      subject: String(user.uuid),\n    };\n\n    return this.jwtService.signAsync({}, opts);\n  }\n\n  public async generateRefreshToken(\n    user: User,\n    expiresIn: number,\n  ): Promise {\n    const token = await this.createRefreshToken(user, expiresIn);\n\n    const opts: SignOptions = {\n      ...BASE_OPTIONS,\n      expiresIn,\n      subject: String(user.uuid),\n      jwtid: String(token.id),\n    };\n\n    return this.jwtService.signAsync({}, opts);\n  }\n\n  public async resolveRefreshToken(\n    encoded: string,\n  ): Promise {\n    const payload = await this.decodeRefreshToken(encoded);\n    const token = await this.getStoredTokenFromRefreshTokenPayload(payload);\n\n    if (!token) {\n      throw new UnprocessableEntityException('Refresh token not found');\n    }\n\n    if (token.isRevoked) {\n      throw new UnprocessableEntityException('Refresh token revoked');\n    }\n\n    const user = await this.getUserFromRefreshTokenPayload(payload);\n\n    if (!user) {\n      throw new UnprocessableEntityException('Refresh token malformed');\n    }\n\n    return { user, token };\n  }\n\n  public async createAccessTokenFromRefreshToken(\n    refresh: string,\n  ): Promise {\n    const { user } = await this.resolveRefreshToken(refresh);\n\n    const token = await this.generateAccessToken(user);\n\n    return { user, token };\n  }\n\n  private async decodeRefreshToken(\n    token: string,\n  ): Promise {\n    try {\n      return this.jwtService.verifyAsync(token);\n    } catch (e) {\n      if (e instanceof TokenExpiredError) {\n        throw new UnprocessableEntityException('Refresh token expired');\n      } else {\n        throw new UnprocessableEntityException('Refresh token malformed');\n      }\n    }\n  }\n\n  private async getUserFromRefreshTokenPayload(\n    payload: RefreshTokenPayload,\n  ): Promise {\n    const subId = payload.sub;\n\n    if (!subId) {\n      throw new UnprocessableEntityException('Refresh token malformed');\n    }\n\n    return this.userRepository.findOne({ UUID: subId });\n  }\n\n  private async getStoredTokenFromRefreshTokenPayload(\n    payload: RefreshTokenPayload,\n  ): Promise {\n    const tokenId = payload.jti;\n\n    if (!tokenId) {\n      throw new UnprocessableEntityException('Refresh token malformed');\n    }\n\n    return this.refreshTokenRepository.findOne({ id: tokenId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                email\n                            \n                            \n                                googleID\n                            \n                            \n                                    Optional\n                                password\n                            \n                            \n                                username\n                            \n                            \n                                UUID\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                emailToLowerCase\n                            \n                            \n                                usernameToLowerCase\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/user.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/user.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            googleID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/user.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: ''})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/user.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/user.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            UUID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/models/user.entity.ts:30\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            emailToLowerCase\n                        \n                        \n                    \n                \n            \n            \n                \nemailToLowerCase()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()\n                \n            \n\n            \n                \n                    Defined in src/users/models/user.entity.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            usernameToLowerCase\n                        \n                        \n                    \n                \n            \n            \n                \nusernameToLowerCase()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()\n                \n            \n\n            \n                \n                    Defined in src/users/models/user.entity.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  Column,\n  ManyToMany,\n  JoinTable,\n  BeforeInsert,\n} from 'typeorm';\n\nimport { GameEntity as Game } from '../../game/models/game.entity';\n\nimport { IconEntity as Icon } from './icon.entity';\nimport { SocialBladeSkinEntity as SocialBladeSkin } from './socialBladeSkin.entity';\n\nexport interface colors {\n  enemeyColor: string;\n  playerColor: string;\n}\n\nenum GameBoard {\n  NORMAL = 'normal',\n  TRADITIONAL = 'traditional',\n  MODERN = 'modern',\n}\n\n@Entity()\nexport class UserEntity {\n  @PrimaryGeneratedColumn('uuid')\n  UUID: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @CreateDateColumn()\n  created: Date;\n\n  @Column({ default: 0 })\n  googleID: string;\n\n  @Column({ default: '' })\n  password?: string;\n\n  // @Column({default:false})\n  // admin?:false;\n\n  // @Column({ default: 1000 })\n  // elo?: number;\n\n  // @ManyToMany(() => Game)\n  // @JoinTable()\n  // games?: Game[];\n\n  // @Column({ default: 0 })\n  // credit?: number;\n\n  // @Column({ type: 'enum', enum: GameBoard, default: GameBoard.NORMAL })\n  // gameBoard?: GameBoard;\n\n  // @Column()\n  // colors?: colors;\n\n  // @Column()\n  // selectedIcon?: Icon;\n\n  // @Column()\n  // availableIcons?: Icon[];\n\n  // @Column()\n  // selectedSocialBladeSkin?: SocialBladeSkin;\n\n  // @Column()\n  // availableSocialBladeSkins?: SocialBladeSkin[];\n\n  @BeforeInsert()\n  emailToLowerCase() {\n    this.email = this.email.toLowerCase();\n  }\n  @BeforeInsert()\n  usernameToLowerCase() {\n    this.username = this.username.toLowerCase();\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserInterface.html":{"url":"interfaces/UserInterface.html","title":"interface - UserInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  UserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        date\n                                \n                                \n                                            Optional\n                                        email\n                                \n                                \n                                            Optional\n                                        googleID\n                                \n                                \n                                            Optional\n                                        password\n                                \n                                \n                                            Optional\n                                        username\n                                \n                                \n                                            Optional\n                                        uuid\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        googleID\n                                    \n                                \n                                \n                                    \n                                        googleID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uuid\n                                    \n                                \n                                \n                                    \n                                        uuid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { GameInterface as Game } from '../../game/models/game.interface';\nimport { IconInterface as Icon } from './icon.interface';\nimport { SocialBladeSkinInterface as SocialBladeSkin } from './socialBladeSkin.interface';\n\nenum GameBoard {\n  NORMAL = 'normal',\n  TRADITIONAL = 'traditional',\n  MODERN = 'modern',\n}\n\ninterface colors {\n  enemeyColor: string;\n  playerColor: string;\n}\n\nexport interface UserInterface {\n  // UNIQUE\n  uuid?: string;\n  username?: string;\n  email?: string;\n  //   NOT UNIQUE\n  googleID?: string;\n  password?: string;\n  date?: Date;\n  // admin?:boolean;\n  // elo?: number;\n  // games?: Game[];\n  // credit?: number;\n  // gameBoard?: GameBoard;\n  // colors?: colors;\n  // selectedIcon?: Icon;\n  // availableIcons?: Icon[];\n  // selectedSocialBladeSkin?: SocialBladeSkin;\n  // availableSocialBladeSkins?: SocialBladeSkin[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsernameExistsConstraint.html":{"url":"classes/UsernameExistsConstraint.html","title":"class - UsernameExistsConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsernameExistsConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/validate-decorators/usernameExists.decorator.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(userName: any, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/validate-decorators/usernameExists.decorator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userName\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport { getRepository } from 'typeorm';\nimport { UserEntity } from '../users/models/user.entity';\n\nconst userRepository = getRepository(UserEntity);\n\n@ValidatorConstraint({ async: true })\nexport class UsernameExistsConstraint implements ValidatorConstraintInterface {\n  validate(userName: any, args: ValidationArguments) {\n    return userRepository.findOne(userName).then((user) => {\n      if (user) return false;\n      return true;\n    });\n  }\n}\n\nexport function UsernameExists(validationOptions?: ValidationOptions) {\n  return function (object: Object, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: UsernameExistsConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                buildResponsePayload\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            buildResponsePayload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    buildResponsePayload(user: User, accessToken: string, refreshToken?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accessToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AuthenticationPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: LogInDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                LogInDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            refresh\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(body: RefreshTokenDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/refresh')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RefreshTokenDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(user: SignUpDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SignUpDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Post,\n  Logger,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { TokensService } from 'src/auth/token.service';\nimport { UsersService } from './users.service';\nimport { SignUpDTO } from './dto/sign-up.dto';\nimport { LogInDTO } from './dto/log-in.dto';\nimport { UserInterface as User } from './models/user.interface';\nimport { RefreshTokenDTO } from 'src/auth/dto/refresh-token.dto';\n\ninterface ResponseObject {\n  success: boolean;\n  data: AuthenticationPayload | null;\n  errors: string[];\n}\n\ninterface AuthenticationPayload {\n  user: User;\n  payload: {\n    type: string;\n    token: string;\n    refresh_token?: string;\n  };\n}\n\n@Controller('users')\nexport class UsersController {\n  constructor(\n    private readonly usersService: UsersService,\n    private tokensService: TokensService,\n  ) {}\n  private readonly logger = new Logger(UsersController.name);\n\n  @Post('register')\n  @UsePipes(new ValidationPipe())\n  async register(@Body() user: SignUpDTO): Promise {\n    this.logger.log('Register hit');\n    const result = await this.usersService.register(user);\n\n    if (result.errors.length > 0)\n      return { success: false, data: null, errors: result.errors };\n\n    const token = await this.tokensService.generateAccessToken(user);\n    const refresh = await this.tokensService.generateRefreshToken(\n      user,\n      60 * 60 * 24 * 30,\n    );\n\n    const payload = this.buildResponsePayload(user, token, refresh);\n\n    return {\n      success: true,\n      data: payload,\n      errors: [],\n    };\n  }\n\n  @Post('login')\n  @UsePipes(new ValidationPipe())\n  async login(@Body() user: LogInDTO): Promise {\n    const validatedUser = await this.usersService.login(user);\n    if (!validatedUser)\n      return { success: false, data: null, errors: ['Invalid Credentials'] };\n\n    const token = await this.tokensService.generateAccessToken(validatedUser);\n    const refresh = await this.tokensService.generateRefreshToken(\n      validatedUser,\n      60 * 60 * 24 * 30,\n    );\n\n    const { password, ...response } = validatedUser;\n\n    const payload = this.buildResponsePayload(response, token, refresh);\n\n    return {\n      success: true,\n      data: payload,\n      errors: [],\n    };\n  }\n\n  // TODO move to auth module\n  @Post('/refresh')\n  async refresh(@Body() body: RefreshTokenDTO): Promise {\n    const {\n      user,\n      token,\n    } = await this.tokensService.createAccessTokenFromRefreshToken(\n      body.refreshToken,\n    );\n\n    const payload = this.buildResponsePayload(user, token);\n\n    return {\n      success: true,\n      data: payload,\n      errors: [],\n    };\n  }\n\n  private buildResponsePayload(\n    user: User,\n    accessToken: string,\n    refreshToken?: string,\n  ): AuthenticationPayload {\n    return {\n      user: user,\n      payload: {\n        type: 'bearer',\n        token: accessToken,\n        ...(refreshToken ? { refresh_token: refreshToken } : {}),\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserEntity } from './models/user.entity';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserEntity]), AuthModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findByEmailOrUsername\n                            \n                            \n                                    Async\n                                findOneByEmail\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(username: string, email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByEmailOrUsername\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByEmailOrUsername(usernameOrEmail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usernameOrEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByUsername\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginUserDTO: LogInDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginUserDTO\n                                    \n                                                LogInDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registerUserDTO: SignUpDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registerUserDTO\n                                    \n                                                SignUpDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(usernameOrEmail, password)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    usernameOrEmail\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthService } from 'src/auth/auth.service';\nimport { Repository } from 'typeorm';\nimport { UserEntity } from './models/user.entity';\nimport { UserInterface as User } from './models/user.interface';\nimport { SignUpDTO } from './dto/sign-up.dto';\nimport { LogInDTO } from './dto/log-in.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n    private authService: AuthService,\n  ) {}\n\n  // create(user: User): Observable {\n  //   return this.authService.hashPassword(user.password).pipe(\n  //     switchMap((passwordHash: string) => {\n  //       const newUser = new UserEntity();\n  //       newUser.username = user.username;\n  //       newUser.email = user.email;\n  //       newUser.password = passwordHash;\n  //       return from(this.userRepository.save(newUser)).pipe(\n  //         map((user: User) => {\n  //           const { password, ...result } = user;\n  //           return result;\n  //         }),\n  //         catchError((err) => throwError(err)),\n  //       );\n  //     }),\n  //   );\n  // }\n\n  async createUser(\n    username: string,\n    email: string,\n    password: string,\n  ): Promise {\n    const hashedPassword = await this.authService.hashPassword(password);\n    const newUser = new UserEntity();\n    newUser.username = username;\n    newUser.email = email;\n    newUser.password = hashedPassword;\n    const user = await this.userRepository.save(newUser);\n    if (user) {\n      const { password, ...result } = user;\n      return result;\n    } else {\n      return null;\n    }\n  }\n\n  async register(\n    registerUserDTO: SignUpDTO,\n  ): Promise {\n    const { username, email, password } = registerUserDTO;\n\n    // TODO IDK why but this code looks like shit, it really does...\n    // ? REVISION: refactored a little bit, still the nested returns look a little bit odd\n    return this.findOneByUsername(username.toLowerCase()).then((user) => {\n      if (user) {\n        return {\n          user: null,\n          errors: ['Username is already taken'],\n        };\n      } else {\n        return this.findOneByEmail(email.toLowerCase()).then((user) => {\n          if (user) {\n            return {\n              user: null,\n              errors: ['Email is already in use'],\n            };\n          } else {\n            return this.createUser(username, email, password).then((user) => {\n              return {\n                user,\n                errors: [],\n              };\n            });\n          }\n        });\n      }\n    });\n  }\n\n  async login(loginUserDTO: LogInDTO): Promise {\n    const { usernameOrEmail, password } = loginUserDTO;\n    return this.validateUser(usernameOrEmail, password)\n      .then((user) => {\n        return user;\n      })\n      .catch((err) => {\n        throw new UnauthorizedException('Invalid Credentials');\n      });\n  }\n\n  async validateUser(usernameOrEmail, password): Promise {\n    return this.findByEmailOrUsername(usernameOrEmail).then((user) => {\n      if (!user) {\n        throw Error;\n      } else {\n        return this.authService\n          .comparePassword(password, user.password)\n          .then((passwordsMatch) => {\n            if (passwordsMatch) {\n              const { password, ...result } = user;\n              return result;\n            } else {\n              throw Error;\n            }\n          });\n      }\n    });\n  }\n\n  async findOneByUsername(username: string) {\n    return this.userRepository.findOne({ username });\n  }\n\n  async findOneByEmail(email: string) {\n    return this.userRepository.findOne({ email });\n  }\n\n  // TODO very much naive solution, has been secured with isAlphaNumeric, but should prolly change\n  // ? One solution could be to do both searches and only take the valid one if one exists\n  async findByEmailOrUsername(usernameOrEmail: string) {\n    if (usernameOrEmail.includes('@')) {\n      return this.userRepository.findOne({ email: usernameOrEmail });\n    } else {\n      return this.userRepository.findOne({ username: usernameOrEmail });\n    }\n  }\n\n  // findByEmailOrUsername(email: string, username: string): Observable {\n  //   return email\n  //     ? from(this.userRepository.findOne({ email }))\n  //     : username\n  //     ? from(this.userRepository.findOne({ email }))\n  //     : throwError(new Error(\"Credentials weren't provided\"));\n  // }\n  // updateOne(uuid: string, user: User): Observable {\n  //   return from(this.userRepository.update(uuid, user));\n  // }\n\n  // login(user: User): Observable {\n  //   return this.validateUser(user.email, user.username, user.password).pipe(\n  //     switchMap((user: User) => {\n  //       if (user) {\n  //         return this.authService\n  //           .generateJWT(user)\n  //           .pipe(map((jwt: string) => jwt));\n  //       } else {\n  //         return 'Wrong credentials';\n  //       }\n  //     }),\n  //   );\n  // }\n\n  // register(user: User): Observable {\n  //   // VALIDATE CREDENTIALS\n  //   //check if credentials are valid (no special characters in username, check if mail has @ in it); empty\n  //   // CHECK IF EMAIL IS UNIQUE\n  //   // CHECK IF USERNAME IS UNIQUE\n  //   // CHECK IF PASSWORD is strong enough\n  //   // CHECK IF PASSWORDS MATCH\n  //   return of(true);\n  // }\n\n  // validateUser(\n  //   email: string,\n  //   username: string,\n  //   password: string,\n  // ): Observable {\n  //   return this.findByEmailOrUsername(email, username).pipe(\n  //     switchMap((user: User) =>\n  //       this.authService.comparePassword(password, user.password).pipe(\n  //         map((match: boolean) => {\n  //           if (match) {\n  //             const { password, ...result } = user;\n  //             return result;\n  //           } else {\n  //             throw Error;\n  //           }\n  //         }),\n  //       ),\n  //     ),\n  //   );\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/colors.html":{"url":"interfaces/colors.html","title":"interface - colors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  colors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.entity.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        enemeyColor\n                                \n                                \n                                        playerColor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enemeyColor\n                                    \n                                \n                                \n                                    \n                                        enemeyColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        playerColor\n                                    \n                                \n                                \n                                    \n                                        playerColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  Column,\n  ManyToMany,\n  JoinTable,\n  BeforeInsert,\n} from 'typeorm';\n\nimport { GameEntity as Game } from '../../game/models/game.entity';\n\nimport { IconEntity as Icon } from './icon.entity';\nimport { SocialBladeSkinEntity as SocialBladeSkin } from './socialBladeSkin.entity';\n\nexport interface colors {\n  enemeyColor: string;\n  playerColor: string;\n}\n\nenum GameBoard {\n  NORMAL = 'normal',\n  TRADITIONAL = 'traditional',\n  MODERN = 'modern',\n}\n\n@Entity()\nexport class UserEntity {\n  @PrimaryGeneratedColumn('uuid')\n  UUID: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @CreateDateColumn()\n  created: Date;\n\n  @Column({ default: 0 })\n  googleID: string;\n\n  @Column({ default: '' })\n  password?: string;\n\n  // @Column({default:false})\n  // admin?:false;\n\n  // @Column({ default: 1000 })\n  // elo?: number;\n\n  // @ManyToMany(() => Game)\n  // @JoinTable()\n  // games?: Game[];\n\n  // @Column({ default: 0 })\n  // credit?: number;\n\n  // @Column({ type: 'enum', enum: GameBoard, default: GameBoard.NORMAL })\n  // gameBoard?: GameBoard;\n\n  // @Column()\n  // colors?: colors;\n\n  // @Column()\n  // selectedIcon?: Icon;\n\n  // @Column()\n  // availableIcons?: Icon[];\n\n  // @Column()\n  // selectedSocialBladeSkin?: SocialBladeSkin;\n\n  // @Column()\n  // availableSocialBladeSkins?: SocialBladeSkin[];\n\n  @BeforeInsert()\n  emailToLowerCase() {\n    this.email = this.email.toLowerCase();\n  }\n  @BeforeInsert()\n  usernameToLowerCase() {\n    this.username = this.username.toLowerCase();\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/colors-1.html":{"url":"interfaces/colors-1.html","title":"interface - colors-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  colors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/models/user.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        enemeyColor\n                                \n                                \n                                        playerColor\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enemeyColor\n                                    \n                                \n                                \n                                    \n                                        enemeyColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        playerColor\n                                    \n                                \n                                \n                                    \n                                        playerColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { GameInterface as Game } from '../../game/models/game.interface';\nimport { IconInterface as Icon } from './icon.interface';\nimport { SocialBladeSkinInterface as SocialBladeSkin } from './socialBladeSkin.interface';\n\nenum GameBoard {\n  NORMAL = 'normal',\n  TRADITIONAL = 'traditional',\n  MODERN = 'modern',\n}\n\ninterface colors {\n  enemeyColor: string;\n  playerColor: string;\n}\n\nexport interface UserInterface {\n  // UNIQUE\n  uuid?: string;\n  username?: string;\n  email?: string;\n  //   NOT UNIQUE\n  googleID?: string;\n  password?: string;\n  date?: Date;\n  // admin?:boolean;\n  // elo?: number;\n  // games?: Game[];\n  // credit?: number;\n  // gameBoard?: GameBoard;\n  // colors?: colors;\n  // selectedIcon?: Icon;\n  // availableIcons?: Icon[];\n  // selectedSocialBladeSkin?: SocialBladeSkin;\n  // availableSocialBladeSkins?: SocialBladeSkin[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            variable\n            bcrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/models/refresh-token.entity.ts\n            \n            class\n            RefreshTokenEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/models/refresh-token.interface.ts\n            \n            interface\n            RefreshTokenInterface\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/strategies/google.strategy.ts\n            \n            injectable\n            GoogleStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/token.service.ts\n            \n            injectable\n            TokensService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/auth/token.service.ts\n            \n            interface\n            RefreshTokenPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/token.service.ts\n            \n            variable\n            BASE_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/game/game.controller.ts\n            \n            controller\n            GameController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/game/game.service.ts\n            \n            injectable\n            GameService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/game/models/chat.interface.ts\n            \n            interface\n            ChatRecord\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/game/models/chat.interface.ts\n            \n            interface\n            message\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/game/models/game.entity.ts\n            \n            class\n            GameEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/game/models/game.interface.ts\n            \n            interface\n            GameInterface\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/log-in.dto.ts\n            \n            class\n            LogInDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/sign-up.dto.ts\n            \n            class\n            SignUpDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/models/icon.entity.ts\n            \n            class\n            IconEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/models/icon.interface.ts\n            \n            interface\n            IconInterface\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/models/socialBladeSkin.entity.ts\n            \n            class\n            SocialBladeSkinEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/models/socialBladeSkin.interface.ts\n            \n            interface\n            SocialBladeSkinInterface\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/models/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/models/user.entity.ts\n            \n            interface\n            colors\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/models/user.interface.ts\n            \n            interface\n            colors\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/models/user.interface.ts\n            \n            interface\n            UserInterface\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            interface\n            AuthenticationPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            interface\n            ResponseObject\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/validate-decorators/match.decorator.ts\n            \n            class\n            MatchConstraint\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/validate-decorators/match.decorator.ts\n            \n            function\n            Match\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/validate-decorators/usernameExists.decorator.ts\n            \n            class\n            UsernameExistsConstraint\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/validate-decorators/usernameExists.decorator.ts\n            \n            function\n            UsernameExists\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/validate-decorators/usernameExists.decorator.ts\n            \n            variable\n            userRepository\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/config : ^0.6.1\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            bcrypt : ^5.0.0\n        \n            class-validator : ^0.12.2\n        \n            dotenv : ^8.2.0\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            typeorm : ^0.2.29\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GameBoard   (src/.../user.entity.ts)\n                        \n                        \n                            GameBoard   (src/.../user.interface.ts)\n                        \n                        \n                            gameType   (src/.../game.entity.ts)\n                        \n                        \n                            gameType   (src/.../game.interface.ts)\n                        \n                        \n                            typeOfWin   (src/.../game.entity.ts)\n                        \n                        \n                            typeOfWin   (src/.../game.interface.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/models/user.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        GameBoard\n                    \n                \n                        \n                            \n                                 NORMAL\n                            \n                        \n                        \n                            \n                                Value : normal\n                            \n                        \n                        \n                            \n                                 TRADITIONAL\n                            \n                        \n                        \n                            \n                                Value : traditional\n                            \n                        \n                        \n                            \n                                 MODERN\n                            \n                        \n                        \n                            \n                                Value : modern\n                            \n                        \n            \n        \n\n    src/users/models/user.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        GameBoard\n                    \n                \n                        \n                            \n                                 NORMAL\n                            \n                        \n                        \n                            \n                                Value : normal\n                            \n                        \n                        \n                            \n                                 TRADITIONAL\n                            \n                        \n                        \n                            \n                                Value : traditional\n                            \n                        \n                        \n                            \n                                 MODERN\n                            \n                        \n                        \n                            \n                                Value : modern\n                            \n                        \n            \n        \n\n    src/game/models/game.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        gameType\n                    \n                \n                        \n                            \n                                 RANKED\n                            \n                        \n                        \n                            \n                                Value : ranked\n                            \n                        \n                        \n                            \n                                 QUICK\n                            \n                        \n                        \n                            \n                                Value : quick\n                            \n                        \n                        \n                            \n                                 CUSTOM\n                            \n                        \n                        \n                            \n                                Value : custom\n                            \n                        \n                        \n                            \n                                 NUMBER\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        typeOfWin\n                    \n                \n                        \n                            \n                                 COMBINATION\n                            \n                        \n                        \n                            \n                                Value : combination\n                            \n                        \n                        \n                            \n                                 TIME\n                            \n                        \n                        \n                            \n                                Value : time\n                            \n                        \n                        \n                            \n                                 SURRENDER\n                            \n                        \n                        \n                            \n                                Value : surrender\n                            \n                        \n                        \n                            \n                                 TIE\n                            \n                        \n                        \n                            \n                                Value : tie\n                            \n                        \n            \n        \n\n    src/game/models/game.interface.ts\n    \n        \n            \n                \n                    \n                        \n                        gameType\n                    \n                \n                        \n                            \n                                 RANKED\n                            \n                        \n                        \n                            \n                                Value : ranked\n                            \n                        \n                        \n                            \n                                 QUICK\n                            \n                        \n                        \n                            \n                                Value : quick\n                            \n                        \n                        \n                            \n                                 CUSTOM\n                            \n                        \n                        \n                            \n                                Value : custom\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        typeOfWin\n                    \n                \n                        \n                            \n                                 COMBINATION\n                            \n                        \n                        \n                            \n                                Value : combination\n                            \n                        \n                        \n                            \n                                 TIME\n                            \n                        \n                        \n                            \n                                Value : time\n                            \n                        \n                        \n                            \n                                 SURRENDER\n                            \n                        \n                        \n                            \n                                Value : surrender\n                            \n                        \n                        \n                            \n                                 TIE\n                            \n                        \n                        \n                            \n                                Value : tie\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            Match   (src/.../match.decorator.ts)\n                        \n                        \n                            UsernameExists   (src/.../usernameExists.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/validate-decorators/match.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            Match\n                        \n                        \n                    \n                \n            \n            \n                \nMatch(property, validationOptions?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    property\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    validationOptions\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/validate-decorators/usernameExists.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            UsernameExists\n                        \n                        \n                    \n                \n            \n            \n                \nUsernameExists(validationOptions?)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    validationOptions\n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covStay in touch\n\nAuthor - Michal Vaňata\nWebsite - https://playgomoku.com\nDiscord - https://discord.com/ASYgt6j\n\nLicense\nPlaygomoku MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/message.html":{"url":"interfaces/message.html","title":"interface - message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/game/models/chat.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        author\n                                \n                                \n                                        content\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        author\n                                    \n                                \n                                \n                                    \n                                        author:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserInterface as User } from '../../users/models/user.interface';\ninterface message {\n  author: string;\n  content: string;\n}\n\nexport interface ChatRecord {\n  id?: number;\n  messages?: message[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GameModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_GameModule\n\n\n\ncluster_GameModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleStrategy\n\nGoogleStrategy\n\nAuthModule -->\n\nGoogleStrategy->AuthModule\n\n\n\n\n\nTokensService\n\nTokensService\n\nAuthModule -->\n\nTokensService->AuthModule\n\n\n\n\n\nGameService\n\nGameService\n\n\n\nGameModule\n\nGameModule\n\nGameModule -->\n\nGameService->GameModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    12 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BASE_OPTIONS   (src/.../token.service.ts)\n                        \n                        \n                            bcrypt   (src/.../auth.service.ts)\n                        \n                        \n                            Role   (src/.../roles.decorator.ts)\n                        \n                        \n                            userRepository   (src/.../usernameExists.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/token.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            BASE_OPTIONS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     SignOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  issuer: 'https://playgomoku.com',\n  audience: 'https://playgomoku.com',\n}\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            bcrypt\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('bcrypt')\n                        \n                    \n\n\n            \n        \n\n    src/auth/decorators/roles.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Role\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...role: string[]) => SetMetadata('roles', role)\n                        \n                    \n\n\n            \n        \n\n    src/validate-decorators/usernameExists.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            userRepository\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : getRepository(UserEntity)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
